{"version":3,"file":"static/js/999.f83d6737.chunk.js","mappings":"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","sources":["../node_modules/browser-readablestream-to-it/index.js","../node_modules/kubo-rpc-client/node_modules/any-signal/index.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/env.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/fetch.browser.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/files/url-source.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/http.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/http/error.js","../node_modules/kubo-rpc-client/node_modules/ipfs-utils/src/http/fetch.browser.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/minimal.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/index-minimal.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/reader.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/reader_buffer.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/roots.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/rpc.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/rpc/service.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/util/longbits.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/util/minimal.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/writer.js","../node_modules/kubo-rpc-client/node_modules/protobufjs/src/writer_buffer.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/multibases.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/multicodecs.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/multihashes.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bytes.js","../node_modules/kubo-rpc-client/node_modules/multiformats/vendor/varint.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/varint.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/hashes/digest.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/hashes/identity.js","../node_modules/kubo-rpc-client/node_modules/multiformats/vendor/base-x.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/identity.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base2.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base8.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base10.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base16.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base32.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base36.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base58.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base64.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/bases/base256emoji.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/hashes/hasher.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/hashes/sha2-browser.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/codecs/raw.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/codecs/json.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/cid.js","../node_modules/kubo-rpc-client/node_modules/multiformats/src/basics.js","../node_modules/parse-duration/index.mjs","../node_modules/kubo-rpc-client/node_modules/@libp2p/logger/src/index.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/node_modules/@multiformats/multiaddr/src/ip.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/node_modules/@multiformats/multiaddr/src/protocols-table.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/node_modules/@multiformats/multiaddr/src/convert.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/node_modules/@multiformats/multiaddr/src/codec.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/node_modules/@multiformats/multiaddr/src/index.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/to-url-string.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/agent.browser.js","../node_modules/kubo-rpc-client/src/lib/core.js","../node_modules/kubo-rpc-client/src/lib/configure.js","../node_modules/kubo-rpc-client/src/lib/mode-to-string.js","../node_modules/kubo-rpc-client/src/lib/parse-mtime.js","../node_modules/kubo-rpc-client/src/lib/to-url-search-params.js","../node_modules/kubo-rpc-client/src/bitswap/wantlist.js","../node_modules/kubo-rpc-client/src/bitswap/wantlist-for-peer.js","../node_modules/@libp2p/interface-peer-id/src/index.ts","../node_modules/@libp2p/interfaces/src/errors.ts","../node_modules/kubo-rpc-client/node_modules/@libp2p/peer-id/src/index.ts","../node_modules/kubo-rpc-client/src/bitswap/stat.js","../node_modules/kubo-rpc-client/src/block/get.js","../node_modules/kubo-rpc-client/node_modules/it-peekable/src/index.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/node_modules/browser-readablestream-to-it/src/index.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/node_modules/it-all/src/index.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/files/utils.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/files/normalise-content.browser.js","../node_modules/kubo-rpc-client/node_modules/it-map/src/index.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-unixfs/src/unixfs.js","../node_modules/kubo-rpc-client/node_modules/ipfs-unixfs/src/index.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/files/normalise-candidate-multiple.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/files/normalise-input-multiple.browser.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/mode-to-string.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/multipart-request.browser.js","../node_modules/kubo-rpc-client/src/lib/abort-signal.js","../node_modules/kubo-rpc-client/src/block/put.js","../node_modules/kubo-rpc-client/src/block/rm.js","../node_modules/kubo-rpc-client/src/block/stat.js","../node_modules/kubo-rpc-client/src/block/index.js","../node_modules/kubo-rpc-client/src/bootstrap/add.js","../node_modules/kubo-rpc-client/src/bootstrap/list.js","../node_modules/kubo-rpc-client/src/bootstrap/rm.js","../node_modules/kubo-rpc-client/src/bootstrap/index.js","../node_modules/kubo-rpc-client/src/config/profiles/apply.js","../node_modules/kubo-rpc-client/src/config/profiles/index.js","../node_modules/kubo-rpc-client/src/config/get.js","../node_modules/kubo-rpc-client/src/config/get-all.js","../node_modules/kubo-rpc-client/src/config/replace.js","../node_modules/kubo-rpc-client/src/config/set.js","../node_modules/kubo-rpc-client/src/config/index.js","../node_modules/kubo-rpc-client/src/dag/export.js","../node_modules/kubo-rpc-client/src/lib/resolve.js","../node_modules/kubo-rpc-client/node_modules/it-last/src/index.ts","../node_modules/kubo-rpc-client/src/dag/get.js","../node_modules/kubo-rpc-client/node_modules/it-first/src/index.ts","../node_modules/kubo-rpc-client/src/dag/import.js","../node_modules/kubo-rpc-client/src/dag/put.js","../node_modules/kubo-rpc-client/src/dag/resolve.js","../node_modules/kubo-rpc-client/src/dag/index.js","../node_modules/kubo-rpc-client/src/dht/response-types.js","../node_modules/kubo-rpc-client/src/dht/map-event.js","../node_modules/kubo-rpc-client/src/dht/find-peer.js","../node_modules/kubo-rpc-client/src/dht/find-provs.js","../node_modules/kubo-rpc-client/src/dht/get.js","../node_modules/kubo-rpc-client/src/dht/provide.js","../node_modules/kubo-rpc-client/src/dht/put.js","../node_modules/kubo-rpc-client/src/dht/query.js","../node_modules/kubo-rpc-client/src/dht/index.js","../node_modules/kubo-rpc-client/src/diag/cmds.js","../node_modules/kubo-rpc-client/src/diag/net.js","../node_modules/kubo-rpc-client/src/diag/sys.js","../node_modules/kubo-rpc-client/src/diag/index.js","../node_modules/kubo-rpc-client/src/files/cp.js","../node_modules/kubo-rpc-client/src/files/flush.js","../node_modules/kubo-rpc-client/src/lib/object-to-camel.js","../node_modules/kubo-rpc-client/src/lib/object-to-camel-with-metadata.js","../node_modules/kubo-rpc-client/src/files/ls.js","../node_modules/kubo-rpc-client/src/files/mkdir.js","../node_modules/kubo-rpc-client/src/files/mv.js","../node_modules/kubo-rpc-client/src/files/read.js","../node_modules/kubo-rpc-client/src/files/rm.js","../node_modules/kubo-rpc-client/src/files/stat.js","../node_modules/kubo-rpc-client/src/files/write.js","../node_modules/kubo-rpc-client/src/files/index.js","../node_modules/kubo-rpc-client/src/key/export.js","../node_modules/kubo-rpc-client/src/key/gen.js","../node_modules/kubo-rpc-client/src/key/import.js","../node_modules/kubo-rpc-client/src/key/list.js","../node_modules/kubo-rpc-client/src/key/rename.js","../node_modules/kubo-rpc-client/src/key/rm.js","../node_modules/kubo-rpc-client/src/key/index.js","../node_modules/kubo-rpc-client/src/log/level.js","../node_modules/kubo-rpc-client/src/log/ls.js","../node_modules/kubo-rpc-client/src/log/tail.js","../node_modules/kubo-rpc-client/src/log/index.js","../node_modules/kubo-rpc-client/src/name/publish.js","../node_modules/kubo-rpc-client/src/name/resolve.js","../node_modules/kubo-rpc-client/src/name/pubsub/cancel.js","../node_modules/kubo-rpc-client/src/name/pubsub/state.js","../node_modules/kubo-rpc-client/src/name/pubsub/subs.js","../node_modules/kubo-rpc-client/src/name/pubsub/index.js","../node_modules/kubo-rpc-client/src/name/index.js","../node_modules/kubo-rpc-client/src/object/data.js","../node_modules/kubo-rpc-client/src/object/get.js","../node_modules/kubo-rpc-client/src/object/links.js","../node_modules/kubo-rpc-client/src/object/new.js","../node_modules/kubo-rpc-client/src/object/put.js","../node_modules/kubo-rpc-client/src/object/stat.js","../node_modules/kubo-rpc-client/src/object/patch/add-link.js","../node_modules/kubo-rpc-client/src/object/patch/append-data.js","../node_modules/kubo-rpc-client/src/object/patch/rm-link.js","../node_modules/kubo-rpc-client/src/object/patch/set-data.js","../node_modules/kubo-rpc-client/src/object/patch/index.js","../node_modules/kubo-rpc-client/src/object/index.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/pins/normalise-input.js","../node_modules/kubo-rpc-client/src/pin/add-all.js","../node_modules/kubo-rpc-client/src/pin/add.js","../node_modules/kubo-rpc-client/src/pin/ls.js","../node_modules/kubo-rpc-client/src/pin/rm-all.js","../node_modules/kubo-rpc-client/src/pin/rm.js","../node_modules/kubo-rpc-client/src/pin/remote/utils.js","../node_modules/kubo-rpc-client/src/pin/remote/add.js","../node_modules/kubo-rpc-client/src/pin/remote/ls.js","../node_modules/kubo-rpc-client/src/pin/remote/rm.js","../node_modules/kubo-rpc-client/src/pin/remote/rm-all.js","../node_modules/kubo-rpc-client/src/pin/remote/service/utils.js","../node_modules/kubo-rpc-client/src/pin/remote/service/add.js","../node_modules/kubo-rpc-client/src/pin/remote/service/ls.js","../node_modules/kubo-rpc-client/src/pin/remote/service/rm.js","../node_modules/kubo-rpc-client/src/pin/remote/service/index.js","../node_modules/kubo-rpc-client/src/pin/remote/index.js","../node_modules/kubo-rpc-client/src/pin/index.js","../node_modules/kubo-rpc-client/src/lib/http-rpc-wire-format.js","../node_modules/kubo-rpc-client/src/pubsub/ls.js","../node_modules/kubo-rpc-client/src/pubsub/peers.js","../node_modules/kubo-rpc-client/src/pubsub/publish.js","../node_modules/kubo-rpc-client/src/pubsub/subscribe.js","../node_modules/kubo-rpc-client/src/pubsub/unsubscribe.js","../node_modules/kubo-rpc-client/src/pubsub/subscription-tracker.js","../node_modules/kubo-rpc-client/src/pubsub/index.js","../node_modules/kubo-rpc-client/src/refs/local.js","../node_modules/kubo-rpc-client/src/refs/index.js","../node_modules/kubo-rpc-client/src/repo/gc.js","../node_modules/kubo-rpc-client/src/repo/stat.js","../node_modules/kubo-rpc-client/src/repo/version.js","../node_modules/kubo-rpc-client/src/repo/index.js","../node_modules/kubo-rpc-client/src/stats/bw.js","../node_modules/kubo-rpc-client/src/stats/index.js","../node_modules/kubo-rpc-client/src/swarm/addrs.js","../node_modules/kubo-rpc-client/src/swarm/connect.js","../node_modules/kubo-rpc-client/src/swarm/disconnect.js","../node_modules/kubo-rpc-client/src/swarm/local-addrs.js","../node_modules/kubo-rpc-client/src/swarm/peers.js","../node_modules/kubo-rpc-client/src/swarm/index.js","../node_modules/kubo-rpc-client/src/add-all.js","../node_modules/kubo-rpc-client/node_modules/blob-to-it/node_modules/browser-readablestream-to-it/src/index.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/files/normalise-content.js","../node_modules/kubo-rpc-client/node_modules/blob-to-it/src/index.ts","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/files/normalise-candidate-single.js","../node_modules/kubo-rpc-client/node_modules/ipfs-core-utils/src/files/normalise-input-single.js","../node_modules/kubo-rpc-client/src/add.js","../node_modules/kubo-rpc-client/src/cat.js","../node_modules/kubo-rpc-client/src/commands.js","../node_modules/kubo-rpc-client/src/dns.js","../node_modules/kubo-rpc-client/src/get-endpoint-config.js","../node_modules/kubo-rpc-client/src/get.js","../node_modules/kubo-rpc-client/src/id.js","../node_modules/kubo-rpc-client/src/is-online.js","../node_modules/kubo-rpc-client/src/ls.js","../node_modules/kubo-rpc-client/src/mount.js","../node_modules/kubo-rpc-client/src/ping.js","../node_modules/kubo-rpc-client/src/resolve.js","../node_modules/kubo-rpc-client/src/start.js","../node_modules/kubo-rpc-client/src/stop.js","../node_modules/kubo-rpc-client/src/version.js","../node_modules/kubo-rpc-client/src/index.js","../node_modules/kubo-rpc-client/src/bitswap/index.js","../node_modules/native-fetch/src/index.js","../node_modules/node-fetch/browser.js"],"sourcesContent":["'use strict'\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\nasync function * browserReadableStreamToIt (stream, options = {}) {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n\nmodule.exports = browserReadableStreamToIt\n","/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\nfunction anySignal (signals) {\n  const controller = new globalThis.AbortController()\n\n  function onAbort () {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue\n      signal.removeEventListener('abort', onAbort)\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue\n    if (signal.aborted) {\n      onAbort()\n      break\n    }\n    signal.addEventListener('abort', onAbort)\n  }\n\n  return controller.signal\n}\n\nmodule.exports = anySignal\nmodule.exports.anySignal = anySignal\n","'use strict'\nconst isElectron = require('is-electron')\n\nconst IS_ENV_WITH_DOM = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9\n// @ts-ignore\nconst IS_ELECTRON = isElectron()\nconst IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON\nconst IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM\nconst IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM\nconst IS_NODE = typeof require === 'function' && typeof process !== 'undefined' && typeof process.release !== 'undefined' && process.release.name === 'node' && !IS_ELECTRON\n// @ts-ignore - we either ignore worker scope or dom scope\nconst IS_WEBWORKER = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\nconst IS_TEST = typeof process !== 'undefined' && typeof process.env !== 'undefined' && process.env.NODE_ENV === 'test'\nconst IS_REACT_NATIVE = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n\nmodule.exports = {\n  isTest: IS_TEST,\n  isElectron: IS_ELECTRON,\n  isElectronMain: IS_ELECTRON_MAIN,\n  isElectronRenderer: IS_ELECTRON_RENDERER,\n  isNode: IS_NODE,\n  /**\n   * Detects browser main thread  **NOT** web worker or service worker\n   */\n  isBrowser: IS_BROWSER,\n  isWebWorker: IS_WEBWORKER,\n  isEnvWithDom: IS_ENV_WITH_DOM,\n  isReactNative: IS_REACT_NATIVE\n}\n","'use strict'\n\n/**\n * @typedef {globalThis.Headers} Headers\n * @typedef {globalThis.Request} Request\n * @typedef {globalThis.Response} Response\n */\n\n// use window.fetch if it is available, fall back to node-fetch if not\nmodule.exports = require('native-fetch')\n","'use strict'\n\nconst HTTP = require('../http')\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  }\n}\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\nasync function * readURLContent (url, options) {\n  const http = new HTTP()\n  const response = await http.get(url, options)\n\n  yield * response.iterator()\n}\n\nmodule.exports = urlSource\n","/* eslint-disable no-undef */\n'use strict'\n\nconst { fetch, Request, Headers } = require('./http/fetch')\nconst { TimeoutError, HTTPError } = require('./http/error')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst { URL, URLSearchParams } = require('iso-url')\nconst anySignal = require('any-signal')\nconst browserReableStreamToIt = require('browser-readablestream-to-it')\nconst { isBrowser, isWebWorker } = require('./env')\nconst all = require('it-all')\n\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise\n  }\n\n  const start = Date.now()\n\n  const timedOut = () => {\n    const time = Date.now() - start\n\n    return time >= ms\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError())\n        abortController.abort()\n      }\n    }, ms)\n\n    /**\n     * @param {(value: any) => void } next\n     */\n    const after = (next) => {\n      /**\n       * @param {any} res\n       */\n      const fn = (res) => {\n        clearTimeout(timeoutID)\n\n        if (timedOut()) {\n          reject(new TimeoutError())\n          return\n        }\n\n        next(res)\n      }\n      return fn\n    }\n\n    promise\n      .then(after(resolve), after(reject))\n  })\n}\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n}\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor (options = {}) {\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options)\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n  async fetch (resource, options = {}) {\n    /** @type {HTTPOptions} */\n    const opts = merge(this.opts, options)\n    // @ts-expect-error\n    const headers = new Headers(opts.headers)\n\n    // validate resource type\n    // @ts-expect-error\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request')\n    }\n\n    const url = new URL(resource.toString(), opts.base)\n\n    const {\n      searchParams,\n      transformSearchParams,\n      json\n    } = opts\n\n    if (searchParams) {\n      if (typeof transformSearchParams === 'function') {\n        // @ts-ignore\n        url.search = transformSearchParams(new URLSearchParams(opts.searchParams))\n      } else {\n        // @ts-ignore\n        url.search = new URLSearchParams(opts.searchParams)\n      }\n    }\n\n    if (json) {\n      opts.body = JSON.stringify(opts.json)\n      headers.set('content-type', 'application/json')\n    }\n\n    const abortController = new AbortController()\n    // @ts-ignore\n    const signal = anySignal([abortController.signal, opts.signal])\n\n    if (globalThis.ReadableStream != null && opts.body instanceof globalThis.ReadableStream && (isBrowser || isWebWorker)) {\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n      opts.body = new Blob(await all(browserReableStreamToIt(opts.body)))\n    }\n\n    /** @type {ExtendedResponse} */\n    // @ts-expect-error additional fields are assigned below\n    const response = await timeout(\n      fetch(\n        url.toString(),\n        {\n          ...opts,\n          signal,\n          // @ts-expect-error non-browser fetch implementations may take extra options\n          timeout: undefined,\n          headers,\n\n          // https://fetch.spec.whatwg.org/#dom-requestinit-duplex\n          // https://github.com/whatwg/fetch/issues/1254\n          duplex: 'half'\n        }\n      ),\n      opts.timeout,\n      abortController\n    )\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response)\n      }\n      throw new HTTPError(response)\n    }\n\n    response.iterator = async function * () {\n      yield * fromStream(response.body)\n    }\n\n    response.ndjson = async function * () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk)\n        } else {\n          yield chunk\n        }\n      }\n    }\n\n    return response\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  post (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'POST' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  get (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'GET' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  put (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'PUT' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  delete (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'DELETE' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  options (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'OPTIONS' })\n  }\n}\n\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\nconst ndjson = async function * (source) {\n  const decoder = new TextDecoder()\n  let buf = ''\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, { stream: true })\n    const lines = buf.split(/\\r?\\n/)\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim()\n      if (l.length > 0) {\n        yield JSON.parse(l)\n      }\n    }\n    buf = lines[lines.length - 1]\n  }\n  buf += decoder.decode()\n  buf = buf.trim()\n  if (buf.length !== 0) {\n    yield JSON.parse(buf)\n  }\n}\n\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\nconst fromStream = (source) => {\n  if (isAsyncIterable(source)) {\n    return source\n  }\n\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]()\n    return {\n      [Symbol.asyncIterator] () {\n        return {\n          next: iter.next.bind(iter),\n          return (value) {\n            source.destroy()\n            if (typeof iter.return === 'function') {\n              return iter.return()\n            }\n            return Promise.resolve({ done: true, value })\n          }\n        }\n      }\n    }\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader()\n    return (async function * () {\n      try {\n        while (true) {\n          // Read from the stream\n          const { done, value } = await reader.read()\n          // Exit if we're done\n          if (done) return\n          // Else yield the chunk\n          if (value) {\n            yield value\n          }\n        }\n      } finally {\n        reader.releaseLock()\n      }\n    })()\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable')\n}\n\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\nconst isAsyncIterable = (value) => {\n  return typeof value === 'object' &&\n  value !== null &&\n  typeof /** @type {any} */(value)[Symbol.asyncIterator] === 'function'\n}\n\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\nconst isWebReadableStream = (value) => {\n  return value && typeof /** @type {any} */(value).getReader === 'function'\n}\n\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\nconst isNodeReadableStream = (value) =>\n  Object.prototype.hasOwnProperty.call(value, 'readable') &&\n  Object.prototype.hasOwnProperty.call(value, 'writable')\n\nHTTP.HTTPError = HTTPError\nHTTP.TimeoutError = TimeoutError\nHTTP.streamToAsyncIterator = fromStream\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options)\n\nmodule.exports = HTTP\n","'use strict'\n\nclass TimeoutError extends Error {\n  constructor (message = 'Request timed out') {\n    super(message)\n    this.name = 'TimeoutError'\n  }\n}\nexports.TimeoutError = TimeoutError\n\nclass AbortError extends Error {\n  constructor (message = 'The operation was aborted.') {\n    super(message)\n    this.name = 'AbortError'\n  }\n}\nexports.AbortError = AbortError\n\nclass HTTPError extends Error {\n  /**\n   * @param {Response} response\n   */\n  constructor (response) {\n    super(response.statusText)\n    this.name = 'HTTPError'\n    this.response = response\n  }\n}\nexports.HTTPError = HTTPError\n","'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\n// @ts-expect-error\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n","// minimal library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.util._configure();\r\n    protobuf.Writer._configure(protobuf.BufferWriter);\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\nvar create = function create() {\r\n    return util.Buffer\r\n        ? function create_buffer_setup(buffer) {\r\n            return (Reader.create = function create_buffer(buffer) {\r\n                return util.Buffer.isBuffer(buffer)\r\n                    ? new BufferReader(buffer)\r\n                    /* istanbul ignore next */\r\n                    : create_array(buffer);\r\n            })(buffer);\r\n        }\r\n        /* istanbul ignore next */\r\n        : create_array;\r\n};\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = create();\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n\r\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        var nativeBuffer = util.Buffer;\r\n        return nativeBuffer\r\n            ? nativeBuffer.alloc(0)\r\n            : new this.buf.constructor(0);\r\n    }\r\n    return this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n    Reader.create = create();\r\n    BufferReader._configure();\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\nBufferReader._configure = function () {\r\n    /* istanbul ignore else */\r\n    if (util.Buffer)\r\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n};\r\n\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice\r\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\r\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n\r\nBufferReader._configure();\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available across modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\r\nutil.isNode = Boolean(typeof global !== \"undefined\"\r\n                   && global\r\n                   && global.process\r\n                   && global.process.versions\r\n                   && global.process.versions.node);\r\n\r\n/**\r\n * Global object reference.\r\n * @memberof util\r\n * @type {Object}\r\n */\r\nutil.global = util.isNode && global\r\n           || typeof window !== \"undefined\" && window\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    CustomError.prototype = Object.create(Error.prototype, {\r\n        constructor: {\r\n            value: CustomError,\r\n            writable: true,\r\n            enumerable: false,\r\n            configurable: true,\r\n        },\r\n        name: {\r\n            get: function get() { return name; },\r\n            set: undefined,\r\n            enumerable: false,\r\n            // configurable: false would accurately preserve the behavior of\r\n            // the original, but I'm guessing that was not intentional.\r\n            // For an actual error subclass, this property would\r\n            // be configurable.\r\n            configurable: true,\r\n        },\r\n        toString: {\r\n            value: function value() { return this.name + \": \" + this.message; },\r\n            writable: true,\r\n            enumerable: false,\r\n            configurable: true,\r\n        },\r\n    });\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\nvar create = function create() {\r\n    return util.Buffer\r\n        ? function create_buffer_setup() {\r\n            return (Writer.create = function create_buffer() {\r\n                return new BufferWriter();\r\n            })();\r\n        }\r\n        /* istanbul ignore next */\r\n        : function create_array() {\r\n            return new Writer();\r\n        };\r\n};\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = create();\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n    Writer.create = create();\r\n    BufferWriter._configure();\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\nBufferWriter._configure = function () {\r\n    /**\r\n     * Allocates a buffer of the specified size.\r\n     * @function\r\n     * @param {number} size Buffer size\r\n     * @returns {Buffer} Buffer\r\n     */\r\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\r\n\r\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\r\n        ? function writeBytesBuffer_set(val, buf, pos) {\r\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n          // also works for plain array values\r\n        }\r\n        /* istanbul ignore next */\r\n        : function writeBytesBuffer_copy(val, buf, pos) {\r\n          if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n          else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n        };\r\n};\r\n\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(BufferWriter.writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else if (buf.utf8Write)\r\n        buf.utf8Write(val, pos);\r\n    else\r\n        buf.write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = util.Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n\r\nBufferWriter._configure();\r\n","/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nconst LOAD_BASE = (name) => Promise.reject(new Error(`No base found for \"${name}\"`))\n\nexport class Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByPrefix = {}\n\n    this._loadBase = options.loadBase || LOAD_BASE\n\n    // Enable all supplied codecs\n    for (const base of options.bases) {\n      this.addBase(base)\n    }\n  }\n\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  addBase (base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`)\n    }\n\n    this._basesByName[base.name] = base\n    this._basesByPrefix[base.prefix] = base\n  }\n\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  removeBase (base) {\n    delete this._basesByName[base.name]\n    delete this._basesByPrefix[base.prefix]\n  }\n\n  /**\n   * @param {string} nameOrPrefix\n   */\n  async getBase (nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix]\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const base = await this._loadBase(nameOrPrefix)\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base)\n    }\n\n    return base\n  }\n\n  listBases () {\n    return Object.values(this._basesByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = (codeOrName) => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`))\n\nexport class Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor (options) {\n    // Object with current list of active hashers\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}\n\n    // Object with current list of active hashers\n    /** @type {Record<number, MultihashHasher>}} */\n    this._hashersByCode = {}\n\n    this._loadHasher = options.loadHasher || LOAD_HASHER\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher)\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  addHasher (hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`)\n    }\n\n    this._hashersByName[hasher.name] = hasher\n    this._hashersByCode[hasher.code] = hasher\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  removeHasher (hasher) {\n    delete this._hashersByName[hasher.name]\n    delete this._hashersByCode[hasher.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher (code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code)\n\n    if (table[code] == null) {\n      this.addHasher(hasher)\n    }\n\n    return hasher\n  }\n\n  listHashers () {\n    return Object.values(this._hashersByName)\n  }\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig\n\n\n/**\n * conversion ratios\n */\n\nparse.nanosecond =\nparse.ns = 1 / 1e6\n\nparse['µs'] =\nparse['μs'] =\nparse.us =\nparse.microsecond = 1 / 1e3\n\nparse.millisecond =\nparse.ms =\nparse[''] = 1\n\nparse.second =\nparse.sec =\nparse.s = parse.ms * 1000\n\nparse.minute =\nparse.min =\nparse.m = parse.s * 60\n\nparse.hour =\nparse.hr =\nparse.h = parse.m * 60\n\nparse.day =\nparse.d = parse.h * 24\n\nparse.week =\nparse.wk =\nparse.w = parse.d * 7\n\nparse.month =\nparse.b =\nparse.d * (365.25 / 12)\n\nparse.year =\nparse.yr =\nparse.y = parse.d * 365.25\n\n/**\n * convert `str` to ms\n *\n * @param {String} str\n * @param {String} format\n * @return {Number}\n */\n\nfunction parse(str='', format='ms'){\n  var result = null\n  // ignore commas/placeholders\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2')\n  var isNegative = str[0] === '-';\n  str.replace(durationRE, function(_, n, units){\n    units = unitRatio(units)\n    if (units) result = (result || 0) + Math.abs(parseFloat(n, 10)) * units\n  })\n\n  return result && ((result / (unitRatio(format) || 1)) * (isNegative ? -1 : 1))\n}\n\nfunction unitRatio(str) {\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\n}\n\nexport default parse\n","import debug from 'debug'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base64 } from 'multiformats/bases/base64'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { CID } from 'multiformats/cid'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Key } from 'interface-datastore'\n\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v)\n}\n\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base32.baseEncode(v)\n}\n\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v?: Uint8Array): string => {\n  return v == null ? 'undefined' : base64.baseEncode(v)\n}\n\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v?: PeerId): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v?: CID): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v: Key): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Multiaddrs\ndebug.formatters.a = (v?: Multiaddr): string => {\n  return v == null ? 'undefined' : v.toString()\n}\n\nexport interface Logger {\n  (formatter: any, ...args: any[]): void\n  error: (formatter: any, ...args: any[]) => void\n  trace: (formatter: any, ...args: any[]) => void\n  enabled: boolean\n}\n\nfunction createDisabledLogger (namespace: string): debug.Debugger {\n  const logger = (): void => {}\n  logger.enabled = false\n  logger.color = ''\n  logger.diff = 0\n  logger.log = (): void => {}\n  logger.namespace = namespace\n  logger.destroy = () => true\n  logger.extend = () => logger\n\n  return logger\n}\n\nexport function logger (name: string): Logger {\n  // trace logging is a no-op by default\n  let trace: debug.Debugger = createDisabledLogger(`${name}:trace`)\n\n  // look at all the debug names and see if trace logging has explicitly been enabled\n  if (debug.enabled(`${name}:trace`) && debug.names.map(r => r.toString()).find(n => n.includes(':trace')) != null) {\n    trace = debug(`${name}:trace`)\n  }\n\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace\n  })\n}\n\nexport function disable (): void {\n  debug.disable()\n}\n\nexport function enable (namespaces: string): void {\n  debug.enable(namespaces)\n}\n\nexport function enabled (namespaces: string): boolean {\n  return debug.enabled(namespaces)\n}\n","import { isIPv4, isIPv6 } from '@chainsafe/is-ip'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport { isIP } from '@chainsafe/is-ip'\nexport const isV4 = isIPv4\nexport const isV6 = isIPv6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip: string): Uint8Array {\n  let offset = 0\n  ip = ip.toString().trim()\n\n  if (isV4(ip)) {\n    const bytes = new Uint8Array(offset + 4)\n\n    ip.split(/\\./g).forEach((byte) => {\n      bytes[offset++] = parseInt(byte, 10) & 0xff\n    })\n\n    return bytes\n  }\n\n  if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer: Uint8Array | undefined\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv: [number, number, ...string[]] = [i, 1]\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    const bytes = new Uint8Array(offset + 16)\n\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      bytes[offset++] = (word >> 8) & 0xff\n      bytes[offset++] = word & 0xff\n    }\n\n    return bytes\n  }\n\n  throw new Error('invalid ip address')\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf: Uint8Array, offset: number = 0, length?: number): string {\n  offset = ~~offset\n  length = length ?? (buf.length - offset)\n\n  const view = new DataView(buf.buffer)\n\n  if (length === 4) {\n    const result = []\n\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i])\n    }\n\n    return result.join('.')\n  }\n\n  if (length === 16) {\n    const result = []\n\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n\n    return result.join(':')\n      .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n      .replace(/:{3,4}/, '::')\n  }\n\n  return ''\n}\n","import type { Protocol } from './index.js'\n\nconst V = -1\nexport const names: Record<string, Protocol> = {}\nexport const codes: Record<number, Protocol> = {}\n\nexport const table: Array<[number, number, string, boolean?, boolean?]> = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [43, 8, 'ipcidr'],\n  [53, V, 'dns', true],\n  [54, V, 'dns4', true],\n  [55, V, 'dns6', true],\n  [56, V, 'dnsaddr', true],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [280, 0, 'webrtc'],\n  [281, 0, 'webrtc-w3c'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, true],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [448, 0, 'tls'],\n  [449, V, 'sni'],\n  [460, 0, 'quic'],\n  [461, 0, 'quic-v1'],\n  [465, 0, 'webtransport'],\n  [466, V, 'certhash'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [777, V, 'memory']\n]\n\n// populate tables\ntable.forEach(row => {\n  const proto = createProtocol(...row)\n  codes[proto.code] = proto\n  names[proto.name] = proto\n})\n\nexport function createProtocol (code: number, size: number, name: string, resolvable?: any, path?: any): Protocol {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol (proto: number | string): Protocol {\n  if (typeof proto === 'number') {\n    if (codes[proto] != null) {\n      return codes[proto]\n    }\n\n    throw new Error(`no protocol with code: ${proto}`)\n  } else if (typeof proto === 'string') {\n    if (names[proto] != null) {\n      return names[proto]\n    }\n\n    throw new Error(`no protocol with name: ${proto}`)\n  }\n\n  throw new Error(`invalid protocol id type: ${typeof proto}`)\n}\n","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\n\nimport * as ip from './ip.js'\nimport { getProtocol } from './protocols-table.js'\nimport { CID } from 'multiformats/cid'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { bases } from 'multiformats/basics'\nimport * as Digest from 'multiformats/hashes/digest'\nimport varint from 'varint'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\n\n/**\n * converts (serializes) addresses\n */\nexport function convert (proto: string, a: string): Uint8Array\nexport function convert (proto: string, a: Uint8Array): string\nexport function convert (proto: string, a: string | Uint8Array): Uint8Array | string {\n  if (a instanceof Uint8Array) {\n    return convertToString(proto, a)\n  } else {\n    return convertToBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString (proto: number | string, buf: Uint8Array): string {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return bytes2ip(buf)\n    case 42: // ipv6zone\n      return bytes2str(buf)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return bytes2port(buf).toString()\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777: // memory\n      return bytes2str(buf)\n\n    case 421: // ipfs\n      return bytes2mh(buf)\n    case 444: // onion\n      return bytes2onion(buf)\n    case 445: // onion3\n      return bytes2onion(buf)\n    case 466: // certhash\n      return bytes2mb(buf)\n    default:\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\n  }\n}\n\nexport function convertToBytes (proto: string | number, str: string): Uint8Array {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n      return ip2bytes(str)\n    case 41: // ipv6\n      return ip2bytes(str)\n    case 42: // ipv6zone\n      return str2bytes(str)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2bytes(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777: // memory\n      return str2bytes(str)\n\n    case 421: // ipfs\n      return mh2bytes(str)\n    case 444: // onion\n      return onion2bytes(str)\n    case 445: // onion3\n      return onion32bytes(str)\n    case 466: // certhash\n      return mb2bytes(str)\n    default:\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n  }\n}\n\nconst decoders = Object.values(bases).map((c) => c.decoder)\nconst anybaseDecoder = (function () {\n  let acc = decoders[0].or(decoders[1])\n  decoders.slice(2).forEach((d) => (acc = acc.or(d)))\n  return acc\n})()\n\nfunction ip2bytes (ipString: string): Uint8Array {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBytes(ipString)\n}\n\nfunction bytes2ip (ipBuff: Uint8Array): string {\n  const ipString = ip.toString(ipBuff, 0, ipBuff.length)\n  if (ipString == null) {\n    throw new Error('ipBuff is required')\n  }\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\nfunction port2bytes (port: number): Uint8Array {\n  const buf = new ArrayBuffer(2)\n  const view = new DataView(buf)\n  view.setUint16(0, port)\n\n  return new Uint8Array(buf)\n}\n\nfunction bytes2port (buf: Uint8Array): number {\n  const view = new DataView(buf.buffer)\n  return view.getUint16(buf.byteOffset)\n}\n\nfunction str2bytes (str: string): Uint8Array {\n  const buf = uint8ArrayFromString(str)\n  const size = Uint8Array.from(varint.encode(buf.length))\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\n}\n\nfunction bytes2str (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(buf)\n}\n\nfunction mh2bytes (hash: string): Uint8Array {\n  let mh\n\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes\n  } else {\n    mh = CID.parse(hash).multihash.bytes\n  }\n\n  // the address is a varint prefixed multihash string representation\n  const size = Uint8Array.from(varint.encode(mh.length))\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\n}\n\nfunction mb2bytes (mbstr: string): Uint8Array {\n  const mb = anybaseDecoder.decode(mbstr)\n  const size = Uint8Array.from(varint.encode(mb.length))\n  return uint8ArrayConcat([size, mb], size.length + mb.length)\n}\nfunction bytes2mb (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const hash = buf.slice(varint.decode.bytes)\n\n  if (hash.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return 'u' + uint8ArrayToString(hash, 'base64url')\n}\n\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(address, 'base58btc')\n}\n\nfunction onion2bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 16) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`)\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction onion32bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 56) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`)\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode(`b${addr[0]}`)\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction bytes2onion (buf: Uint8Array): string {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = uint8ArrayToString(addrBytes, 'base32')\n  const port = bytes2port(portBytes)\n  return `${addr}:${port}`\n}\n","import { convertToBytes, convertToString } from './convert.js'\nimport { getProtocol } from './protocols-table.js'\nimport varint from 'varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { StringTuple, Tuple, Protocol } from './index.js'\n\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples (str: string): string[][] {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      tuples.push([\n        part,\n        // should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString (tuples: StringTuple[]): string {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples (tuples: Array<string[] | string>): Tuple[] {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convertToBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples (tuples: Tuple[]): StringTuple[] {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup[1] != null) {\n      return [proto.code, convertToString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes (tuples: Tuple[]): Uint8Array {\n  return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr (p: Protocol, addr: Uint8Array | number[]): number {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + (varint.decode.bytes ?? 0)\n  }\n}\n\nexport function bytesToTuples (buf: Uint8Array): Tuple[] {\n  const tuples: Array<[number, Uint8Array?]> = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes ?? 0\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n/**\n * Uint8Array -> String\n */\nexport function bytesToString (buf: Uint8Array): string {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes (str: string): Uint8Array {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function fromString (str: string): Uint8Array {\n  return stringToBytes(str)\n}\n\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes (buf: Uint8Array): Uint8Array {\n  const err = validateBytes(buf)\n  if (err != null) {\n    throw err\n  }\n  return Uint8Array.from(buf) // copy\n}\n\nexport function validateBytes (buf: Uint8Array): Error | undefined {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err: any) {\n    return err\n  }\n}\n\nexport function isValidBytes (buf: Uint8Array): boolean {\n  return validateBytes(buf) === undefined\n}\n\nexport function cleanPath (str: string): string {\n  return '/' + str.trim().split('/').filter((a) => a).join('/')\n}\n\nexport function ParseError (str: string): Error {\n  return new Error('Error parsing address: ' + str)\n}\n\nexport function protoFromTuple (tup: any[]): Protocol {\n  const proto = getProtocol(tup[0])\n  return proto\n}\n","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\n\nimport * as codec from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport varint from 'varint'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\n/**\n * Protocols are present in the protocol table\n */\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\n/**\n * A plain JavaScript object representation of a {@link Multiaddr}\n */\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\n/**\n * A NodeAddress is an IPv4/IPv6 address/TCP port combination\n */\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\n/**\n * These types can be parsed into a {@link Multiaddr} object\n */\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\n/**\n * A Resolver is a function that takes a {@link Multiaddr} and resolves it into one\n * or more string representations of that {@link Multiaddr}.\n */\nexport interface Resolver { (addr: Multiaddr, options?: AbortOptions): Promise<string[]> }\n\n/**\n * A code/value pair\n */\nexport type Tuple = [number, Uint8Array?]\n\n/**\n * A code/value pair with the value as a string\n */\nexport type StringTuple = [number, string?]\n\n/**\n * Allows aborting long-lived operations\n */\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map<string, Resolver>()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nexport interface Multiaddr {\n  bytes: Uint8Array\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString: () => string\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * JSON.stringify(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON: () => string\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions: () => MultiaddrObject\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos: () => Protocol[]\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes: () => number[]\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames: () => string[]\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples: () => Tuple[]\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples: () => StringTuple[]\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate: (addr: MultiaddrInput) => Multiaddr\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate: (addr: Multiaddr | string) => Multiaddr\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const addr = multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // Multiaddr(/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC)\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode: (code: number) => Multiaddr\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string)\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId: () => string | null\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock)\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath: () => string | null\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals: (addr: { bytes: Uint8Array }) => boolean\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n   *\n   * resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb)\n   * // ]\n   * ```\n   */\n  resolve: (options?: AbortOptions) => Promise<Multiaddr[]>\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress: () => NodeAddress\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   * const mh2 = multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // Multiaddr(/ip4/192.168.2.1/tcp/5001)\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001)\n   * const mh4 = multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a)\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress: (addr?: Multiaddr) => boolean\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress (addr: NodeAddress, transport: string): Multiaddr {\n  if (addr == null) {\n    throw new Error('requires node address object')\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol')\n  }\n  let ip: string | undefined\n  let host = addr.address\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4'\n      break\n    case 6:\n      ip = 'ip6'\n\n      if (host.includes('%')) {\n        const parts = host.split('%')\n\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr')\n        }\n\n        host = parts[0]\n        const zone = parts[1]\n        ip = `/ip6zone/${zone}/ip6`\n      }\n      break\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.')\n  }\n  return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'))\n}\n\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName (addr: Multiaddr): boolean {\n  if (!isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr (value: any): value is Multiaddr {\n  return Boolean(value?.[symbol])\n}\n\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr implements Multiaddr {\n  public bytes: Uint8Array\n  #string?: string\n  #tuples?: Tuple[]\n  #stringTuples?: StringTuple[]\n\n  [symbol]: boolean = true\n\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  toString (): string {\n    if (this.#string == null) {\n      this.#string = codec.bytesToString(this.bytes)\n    }\n\n    return this.#string\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    let family: 4 | 6 | undefined\n    let transport: string | undefined\n    let host: string | undefined\n    let port: number | undefined\n    let zone = ''\n\n    const tcp = getProtocol('tcp')\n    const udp = getProtocol('udp')\n    const ip4 = getProtocol('ip4')\n    const ip6 = getProtocol('ip6')\n    const dns6 = getProtocol('dns6')\n    const ip6zone = getProtocol('ip6zone')\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`\n      }\n\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name\n        port = 443\n        host = `${value ?? ''}${zone}`\n        family = code === dns6.code ? 6 : 4\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name\n        port = parseInt(value ?? '')\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name\n        host = `${value ?? ''}${zone}`\n        family = code === ip6.code ? 6 : 4\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family,\n      host,\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    const codes: number[] = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes ?? 0\n\n      const p = getProtocol(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  protoNames (): string[] {\n    return this.protos().map(proto => proto.name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    if (this.#tuples == null) {\n      this.#tuples = codec.bytesToTuples(this.bytes)\n    }\n\n    return this.#tuples\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    if (this.#stringTuples == null) {\n      this.#stringTuples = codec.tuplesToStringTuples(this.tuples())\n    }\n\n    return this.#stringTuples\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new DefaultMultiaddr(addr)\n    return new DefaultMultiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new DefaultMultiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = getProtocol(tuple[0])\n        if (proto.path === true) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (path == null) {\n        path = null\n      }\n    } catch {\n      path = null\n    }\n    return path\n  }\n\n  equals (addr: { bytes: Uint8Array }): boolean {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: AbortOptions): Promise<Multiaddr[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new DefaultMultiaddr(a))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr): boolean {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect] (): string {\n    return `Multiaddr(${codec.bytesToString(this.bytes)})`\n  }\n}\n\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr (addr?: MultiaddrInput): Multiaddr {\n  return new DefaultMultiaddr(addr)\n}\n\nexport { getProtocol as protocols }\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\n\n/**\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {string|Multiaddr|URL} url - A string, multiaddr or URL to convert to a url string\n * @returns {string}\n */\nexport function toUrlString (url) {\n  try {\n    // @ts-expect-error\n    url = multiaddrToUri(multiaddr(url))\n  } catch (/** @type {any} */ err) { }\n\n  url = url.toString()\n\n  return url\n}\n","\nexport default () => {}\n","\n/* eslint-env browser */\n\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js'\nimport parseDuration from 'parse-duration'\nimport { logger } from '@libp2p/logger'\nimport HTTP from 'ipfs-utils/src/http.js'\nimport mergeOpts from 'merge-options'\nimport { toUrlString } from 'ipfs-core-utils/to-url-string'\nimport getAgent from 'ipfs-core-utils/agent'\n\nconst log = logger('js-kubo-rpc-client:lib:error-handler')\nconst merge = mergeOpts.bind({ ignoreUndefined: true })\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @typedef {import('../types').Multiaddr} Multiaddr\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  /** @type {Options} */\n  let opts = {}\n  let agent\n\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url)\n\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\n/**\n * @param {Response} response\n */\nexport const errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (/** @type {any} */ err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response)\n\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError()\n    }\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError()\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\n/**\n * @param {string} str\n */\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // @ts-expect-error server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    })\n\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.put\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.delete\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    /**\n     * @param {string | Request} resource\n     * @param {import('../types').HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nexport const HTTPError = HTTP.HTTPError\n","/* eslint-env browser */\nimport { Client } from './core.js'\n\n/**\n * Set default configuration and call create function with them\n *\n * @template T\n * @param {import('../types').ConfigureFn<T>} fn\n * @returns {import('../types').ConfigureFactory<T>}\n */\nexport const configure = (fn) => {\n  return (options) => {\n    return fn(new Client(options), options)\n  }\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","import errCode from 'err-code'\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {{ secs: number, nsecs?: number } | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errCode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n","import { modeToString } from './mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\n\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\nexport function toUrlSearchParams ({ arg, searchParams, hashAlg, mtime, mode, ...options } = {}) {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    }\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg\n  }\n\n  if (mtime != null) {\n    mtime = parseMtime(mtime)\n\n    options.mtime = mtime.secs\n    options.mtimeNsecs = mtime.nsecs\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode)\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = []\n  } else if (!Array.isArray(arg)) {\n    arg = [arg]\n  }\n\n  const urlSearchParams = new URLSearchParams(options)\n\n  arg.forEach((/** @type {any} */ arg) => urlSearchParams.append('arg', arg))\n\n  return urlSearchParams\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createWantlist = configure(api => {\n  /**\n   * @type {import('../types').BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {import('../types').BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n","import type { CID } from 'multiformats/cid'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\nexport type PeerIdType = 'RSA' | 'Ed25519' | 'secp256k1'\n\ninterface BasePeerId {\n  readonly type: PeerIdType\n  readonly multihash: MultihashDigest\n  readonly privateKey?: Uint8Array\n  readonly publicKey?: Uint8Array\n\n  toString: () => string\n  toCID: () => CID\n  toBytes: () => Uint8Array\n  equals: (other: PeerId | Uint8Array | string) => boolean\n}\n\nexport interface RSAPeerId extends BasePeerId {\n  readonly type: 'RSA'\n  readonly publicKey?: Uint8Array\n}\n\nexport interface Ed25519PeerId extends BasePeerId {\n  readonly type: 'Ed25519'\n  readonly publicKey: Uint8Array\n}\n\nexport interface Secp256k1PeerId extends BasePeerId {\n  readonly type: 'secp256k1'\n  readonly publicKey: Uint8Array\n}\n\nexport type PeerId = RSAPeerId | Ed25519PeerId | Secp256k1PeerId\n\nexport const symbol = Symbol.for('@libp2p/peer-id')\n\nexport function isPeerId (other: any): other is PeerId {\n  return other != null && Boolean(other[symbol])\n}\n","\n/**\n * When this error is thrown it means an operation was aborted,\n * usually in response to the `abort` event being emitted by an\n * AbortSignal.\n */\nexport class AbortError extends Error {\n  public readonly code: string\n  public readonly type: string\n\n  constructor (message: string = 'The operation was aborted') {\n    super(message)\n    this.code = AbortError.code\n    this.type = AbortError.type\n  }\n\n  static readonly code = 'ABORT_ERR'\n\n  static readonly type = 'aborted'\n}\n\nexport class CodeError<T extends Record<string, any> = Record<string, never>> extends Error {\n  public readonly props: T\n\n  constructor (\n    message: string,\n    public readonly code: string,\n    props?: T\n  ) {\n    super(message)\n\n    this.name = props?.name ?? 'CodeError'\n    this.props = props ?? {} as T // eslint-disable-line @typescript-eslint/consistent-type-assertions\n  }\n}\n","import { type Ed25519PeerId, type PeerIdType, type RSAPeerId, type Secp256k1PeerId, symbol, type PeerId } from '@libp2p/interface-peer-id'\nimport { CodeError } from '@libp2p/interfaces/errors'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { bases } from 'multiformats/basics'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { identity } from 'multiformats/hashes/identity'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport type { MultibaseDecoder } from 'multiformats/bases/interface'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst baseDecoder = Object\n  .values(bases)\n  .map(codec => codec.decoder)\n  // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n  .reduce((acc, curr) => acc.or(curr), bases.identity.decoder)\n\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72\n\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36\nconst MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37\n\ninterface PeerIdInit {\n  type: PeerIdType\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface RSAPeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n  publicKey?: Uint8Array\n}\n\ninterface Ed25519PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface Secp256k1PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\nclass PeerIdImpl {\n  public type: PeerIdType\n  public readonly multihash: MultihashDigest\n  public readonly privateKey?: Uint8Array\n  public readonly publicKey?: Uint8Array\n  private string?: string\n\n  constructor (init: PeerIdInit) {\n    this.type = init.type\n    this.multihash = init.multihash\n    this.privateKey = init.privateKey\n\n    // mark string cache as non-enumerable\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    })\n  }\n\n  get [Symbol.toStringTag] (): string {\n    return `PeerId(${this.toString()})`\n  }\n\n  readonly [symbol] = true\n\n  toString (): string {\n    if (this.string == null) {\n      this.string = base58btc.encode(this.multihash.bytes).slice(1)\n    }\n\n    return this.string\n  }\n\n  // return self-describing String representation\n  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n  toCID (): CID {\n    return CID.createV1(LIBP2P_KEY_CODE, this.multihash)\n  }\n\n  toBytes (): Uint8Array {\n    return this.multihash.bytes\n  }\n\n  /**\n   * Returns Multiaddr as a JSON string\n   */\n  toJSON (): string {\n    return this.toString()\n  }\n\n  /**\n   * Checks the equality of `this` peer against a given PeerId\n   */\n  equals (id: PeerId | Uint8Array | string): boolean {\n    if (id instanceof Uint8Array) {\n      return uint8ArrayEquals(this.multihash.bytes, id)\n    } else if (typeof id === 'string') {\n      return peerIdFromString(id).equals(this as PeerId)\n    } else if (id?.multihash?.bytes != null) {\n      return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes)\n    } else {\n      throw new Error('not valid Id')\n    }\n  }\n\n  /**\n   * Returns PeerId as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { peerIdFromString } from '@libp2p/peer-id'\n   *\n   * console.info(peerIdFromString('QmFoo'))\n   * // 'PeerId(QmFoo)'\n   * ```\n   */\n  [inspect] (): string {\n    return `PeerId(${this.toString()})`\n  }\n}\n\nclass RSAPeerIdImpl extends PeerIdImpl implements RSAPeerId {\n  public readonly type = 'RSA'\n  public readonly publicKey?: Uint8Array\n\n  constructor (init: RSAPeerIdInit) {\n    super({ ...init, type: 'RSA' })\n\n    this.publicKey = init.publicKey\n  }\n}\n\nclass Ed25519PeerIdImpl extends PeerIdImpl implements Ed25519PeerId {\n  public readonly type = 'Ed25519'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Ed25519PeerIdInit) {\n    super({ ...init, type: 'Ed25519' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nclass Secp256k1PeerIdImpl extends PeerIdImpl implements Secp256k1PeerId {\n  public readonly type = 'secp256k1'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Secp256k1PeerIdInit) {\n    super({ ...init, type: 'secp256k1' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nexport function createPeerId (init: PeerIdInit): PeerId {\n  if (init.type === 'RSA') {\n    return new RSAPeerIdImpl(init)\n  }\n\n  if (init.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(init)\n  }\n\n  if (init.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(init)\n  }\n\n  throw new CodeError('Type must be \"RSA\", \"Ed25519\" or \"secp256k1\"', 'ERR_INVALID_PARAMETERS')\n}\n\nexport function peerIdFromPeerId (other: any): PeerId {\n  if (other.type === 'RSA') {\n    return new RSAPeerIdImpl(other)\n  }\n\n  if (other.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(other)\n  }\n\n  if (other.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(other)\n  }\n\n  throw new CodeError('Not a PeerId', 'ERR_INVALID_PARAMETERS')\n}\n\nexport function peerIdFromString (str: string, decoder?: MultibaseDecoder<any>): PeerId {\n  decoder = decoder ?? baseDecoder\n\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    const multihash = Digest.decode(base58btc.decode(`z${str}`))\n\n    if (str.startsWith('12D')) {\n      return new Ed25519PeerIdImpl({ multihash })\n    } else if (str.startsWith('16U')) {\n      return new Secp256k1PeerIdImpl({ multihash })\n    } else {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  }\n\n  return peerIdFromBytes(baseDecoder.decode(str))\n}\n\nexport function peerIdFromBytes (buf: Uint8Array): PeerId {\n  try {\n    const multihash = Digest.decode(buf)\n\n    if (multihash.code === identity.code) {\n      if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({ multihash })\n      } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({ multihash })\n      }\n    }\n\n    if (multihash.code === sha256.code) {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  } catch {\n    return peerIdFromCID(CID.decode(buf))\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\nexport function peerIdFromCID (cid: CID): PeerId {\n  if (cid == null || cid.multihash == null || cid.version == null || (cid.version === 1 && cid.code !== LIBP2P_KEY_CODE)) {\n    throw new Error('Supplied PeerID CID is invalid')\n  }\n\n  const multihash = cid.multihash\n\n  if (multihash.code === sha256.code) {\n    return new RSAPeerIdImpl({ multihash: cid.multihash })\n  } else if (multihash.code === identity.code) {\n    if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n      return new Ed25519PeerIdImpl({ multihash: cid.multihash })\n    } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n      return new Secp256k1PeerIdImpl({ multihash: cid.multihash })\n    }\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nexport async function peerIdFromKeys (publicKey: Uint8Array, privateKey?: Uint8Array): Promise<PeerId> {\n  if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n    return new Ed25519PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n    return new Secp256k1PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  return new RSAPeerIdImpl({ multihash: await sha256.digest(publicKey), publicKey, privateKey })\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types').BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []).map((/** @type {string} */ str) => peerIdFromString(str)),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('../types').BlockAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('block/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return new Uint8Array(await res.arrayBuffer())\n  }\n  return get\n})\n","\ninterface Peek <T> {\n  peek: () => IteratorResult<T, undefined>\n}\n\ninterface AsyncPeek <T> {\n  peek: () => Promise<IteratorResult<T, undefined>>\n}\n\ninterface Push <T> {\n  push: (value: T) => void\n}\n\ntype Peekable <T> = Iterable<T> & Peek<T> & Push<T> & Iterator<T>\n\ntype AsyncPeekable <T> = AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>\n\nexport default function peekableIterator <I = Iterable<any> | AsyncIterable<any>> (iterable: I): I extends Iterable<infer T>\n  ? Peekable<T>\n  : I extends AsyncIterable<infer T>\n    ? AsyncPeekable<T>\n    : never {\n  // @ts-expect-error\n  const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n    // @ts-expect-error\n    ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n    // @ts-expect-error\n    : [iterable[Symbol.iterator](), Symbol.iterator]\n\n  const queue: any[] = []\n\n  // @ts-expect-error\n  return {\n    peek: () => {\n      return iterator.next()\n    },\n    push: (value: any) => {\n      queue.push(value)\n    },\n    next: () => {\n      if (queue.length > 0) {\n        return {\n          done: false,\n          value: queue.shift()\n        }\n      }\n\n      return iterator.next()\n    },\n    [symbol] () {\n      return this\n    }\n  }\n}\n","/**\n * @packageDocumentation\n *\n * Allows treating a browser readable stream as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'browser-readablestream-to-it'\n * import all from 'it-all'\n *\n * const content = [0, 1, 2, 3, 4]\n *\n * const stream = new ReadableStream({\n *   start(controller) {\n *     for (let i = 0; i < content.length; i++) {\n *       controller.enqueue(content[i])\n *     }\n *\n *     controller.close()\n *   }\n * })\n *\n * const arr = await all(toIt(stream))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * ## preventCancel\n *\n * By default a readable stream will have [.cancel](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel) called on it once it has ended or\n * reading has stopped prematurely.\n *\n * To prevent this behaviour, pass `preventCancel: true` as an option:\n *\n * ```javascript\n * const arr = await all(toIt(stream, { preventCancel: true }))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n\nexport interface BrowserReadableStreamToItOptions {\n  preventCancel?: boolean\n}\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function * browserReadableStreamToIt <T> (stream: ReadableStream<T>, options: BrowserReadableStreamToItOptions = {}): AsyncGenerator<T, void, undefined> {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n","\n/**\n * Collects all values from an (async) iterable and returns them as an array\n */\nexport default async function all <T> (source: AsyncIterable<T> | Iterable<T>): Promise<T[]> {\n  const arr = []\n\n  for await (const entry of source) {\n    arr.push(entry)\n  }\n\n  return arr\n}\n","/**\n * @param {any} obj\n * @returns {obj is ArrayBufferView|ArrayBuffer}\n */\nexport function isBytes (obj) {\n  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer\n}\n\n/**\n * @param {any} obj\n * @returns {obj is globalThis.Blob}\n */\nexport function isBlob (obj) {\n  return obj.constructor &&\n    (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&\n    typeof obj.stream === 'function'\n}\n\n/**\n * An object with a path or content property\n *\n * @param {any} obj\n * @returns {obj is import('ipfs-core-types/src/utils').ImportCandidate}\n */\nexport function isFileObject (obj) {\n  return typeof obj === 'object' && (obj.path || obj.content)\n}\n\n/**\n * @param {any} value\n * @returns {value is ReadableStream}\n */\nexport const isReadableStream = (value) =>\n  value && typeof value.getReader === 'function'\n","import errCode from 'err-code'\nimport itPeekable from 'it-peekable'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n","/**\n * Takes an (async) iterable and returns one with each item mapped by the passed\n * function\n */\nexport default async function * map <I, O> (source: AsyncIterable<I> | Iterable<I>, func: (val: I) => O | Promise<O>): AsyncGenerator<O, void, undefined> {\n  for await (const val of source) {\n    yield func(val)\n  }\n}\n","/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n","import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateMultiple (input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n    }\n\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject({ content: value }, normaliseContent))\n      return\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({ content: peekable }, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.browser.js'\nimport { normaliseCandidateMultiple } from './normalise-candidate-multiple.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').BrowserImportCandidate} BrowserImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.addAll` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: Blob }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidateStream} input\n * @returns {AsyncGenerator<BrowserImportCandidate, void, undefined>}\n */\nexport function normaliseInput (input) {\n  // @ts-expect-error browser normaliseContent returns a Blob not an AsyncIterable<Uint8Array>\n  return normaliseCandidateMultiple(input, normaliseContent, true)\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nimport { normaliseInput } from './files/normalise-input-multiple.browser.js'\nimport { modeToString } from './mode-to-string.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\nexport async function multipartRequest (source, abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n","import { anySignal } from 'any-signal'\n\n/**\n * @param {any[]} signals\n * @returns {AbortSignal[]}\n */\nfunction filter (signals) {\n  return signals.filter(Boolean)\n}\n\n/**\n * @param  {...AbortSignal|undefined} signals\n */\nexport function abortSignal (...signals) {\n  return anySignal(filter(signals))\n}\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\nexport const createPut = configure((api, configOptions) => {\n  /**\n   * @type {import('../types').BlockAPI[\"put\"]}\n   * @see https://docs.ipfs.tech/reference/kubo/rpc/#api-v0-block-put\n   */\n  async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest([data], controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (/** @type {any} */ err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return CID.parse(res.Key)\n  }\n\n  return put\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createRm = configure(api => {\n  /**\n   * @type {import('../types').BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {import('../types').RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types').BlockAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('block/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Key), size: data.Size }\n  }\n\n  return stat\n})\n","import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBlock (config) {\n  return {\n    get: createGet(config),\n    put: createPut(config),\n    rm: createRm(config),\n    stat: createStat(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\nexport const createAdd = configure(api => {\n  /**\n   * @type {import('../types').BootstrapAPI[\"add\"]}\n   */\n  async function add (addr, options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return add\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\nexport const createList = configure(api => {\n  /**\n   * @type {import('../types').BootstrapAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('bootstrap/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return list\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\nexport const createRm = configure(api => {\n  /**\n   * @type {import('../types').BootstrapAPI[\"rm\"]}\n   */\n  async function rm (addr, options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => multiaddr(ma)) }\n  }\n\n  return rm\n})\n","import { createAdd } from './add.js'\nimport { createList } from './list.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBootstrap (config) {\n  return {\n    add: createAdd(config),\n    list: createList(config),\n    rm: createRm(config)\n  }\n}\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createApply = configure(api => {\n  /**\n   * @type {import('../../types').ConfigProfilesAPI[\"apply\"]}\n   */\n  async function apply (profile, options = {}) {\n    const res = await api.post('config/profile/apply', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: profile,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      original: data.OldCfg, updated: data.NewCfg\n    }\n  }\n\n  return apply\n})\n","import { createApply } from './apply.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createProfiles (config) {\n  return {\n    apply: createApply(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('../types.js').ConfigAPI[\"get\"]}\n   */\n  const get = async (key, options = {}) => {\n    if (!key) {\n      throw new Error('key argument is required')\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Value\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createGetAll = configure(api => {\n  /**\n   * @type {import('../types.js').ConfigAPI[\"getAll\"]}\n   */\n  const getAll = async (options = {}) => {\n    const res = await api.post('config/show', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data\n  }\n\n  return getAll\n})\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\nexport const createReplace = configure(api => {\n  /**\n   * @type {import('../types.js').ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createSet = configure(api => {\n  /**\n   * @type {import('../types.js').ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n","import { createProfiles } from './profiles/index.js'\nimport { createGet } from './get.js'\nimport { createGetAll } from './get-all.js'\nimport { createReplace } from './replace.js'\nimport { createSet } from './set.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createConfig (config) {\n  return {\n    getAll: createGetAll(config),\n    get: createGet(config),\n    set: createSet(config),\n    replace: createReplace(config),\n    profiles: createProfiles(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createExport = configure(api => {\n  /**\n   * @type {import('../types').DAGAPI[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    const res = await api.post('dag/export', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: root.toString()\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return dagExport\n})\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('../types').Multicodecs} codecs\n * @param {(cid: CID, options?: import('../types').AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {import('../types').AbortOptions} [options]\n */\nexport async function * resolve (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n","/**\n * Returns the last item of an (async) iterable, unless empty, in which case\n * return `undefined`\n */\nexport default async function last <T> (source: AsyncIterable<T> | Iterable<T>): Promise<T | undefined> {\n  let res\n\n  for await (const entry of source) {\n    res = entry\n  }\n\n  return res\n}\n","import { configure } from '../lib/configure.js'\nimport { resolve } from '../lib/resolve.js'\nimport first from 'it-first'\nimport last from 'it-last'\nimport errCode from 'err-code'\nimport { createGet as createBlockGet } from '../block/get.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts)\n\n    /**\n     * @type {import('../types').DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('../types').GetResult | undefined} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n","\n/**\n * Returns the first result from an (async) iterable, unless empty, in which\n * case returns `undefined`\n */\nexport default async function first <T> (source: AsyncIterable<T> | Iterable<T>): Promise<T | undefined> {\n  for await (const entry of source) { // eslint-disable-line no-unreachable-loop\n    return entry\n  }\n\n  return undefined\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { CID } from 'multiformats/cid'\n\nexport const createImport = configure(api => {\n  /**\n   * @type {import('../types.js').DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {import('../types').DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      }\n\n      let serialized\n\n      if (settings.inputCodec) {\n        // if you supply an inputCodec, we assume you're passing in a raw, encoded\n        // block using that codec, so we'll just pass that on to the server and let\n        // it deal with the decode/encode/store cycle\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        serialized = dagNode\n      } else {\n        // if you don't supply an inputCodec, we assume you've passed in a JavaScript\n        // object you want to have encoded using storeCodec, so we'll prepare it for\n        // you if we have the codec\n        const storeCodec = await codecs.getCodec(settings.storeCodec)\n        serialized = storeCodec.encode(dagNode)\n        // now we have a serialized form, the server should be told to receive it\n        // in that format\n        settings.inputCodec = settings.storeCodec\n      }\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest([serialized], controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {import('../types.js').DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n","import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createDag (codecs, config) {\n  return {\n    export: createExport(config),\n    get: createGet(codecs, config),\n    import: createImport(config),\n    put: createPut(codecs, config),\n    resolve: createResolve(config)\n  }\n}\n","\n// Response types are defined here =\n// https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L15-L24\nexport const SendingQuery = 0\nexport const PeerResponse = 1\nexport const FinalPeer = 2\nexport const QueryError = 3\nexport const Provider = 4\nexport const Value = 5\nexport const AddingPeer = 6\nexport const DialingPeer = 7\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {ReturnType<typeof multiaddr>} Multiaddr\n */\n\n/**\n * @param {import('../types').MapEvent} event\n * @returns {import('../types').QueryEvent}\n */\nexport const mapEvent = (event) => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    }\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] })),\n      providers: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n      // TODO: how to infer this from the go-ipfs response\n      // record: ???\n    }\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n    /** @type {import('../types.js').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    }\n\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      }\n    }\n\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    }\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    }\n  }\n\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n    }\n  }\n\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    }\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ ID }) => peerIdFromString(ID))\n\n    if (!peers.length) {\n      throw new Error('No peer found')\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    }\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    }\n  }\n\n  throw new Error('Unknown DHT event type')\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\nexport const createFindPeer = configure(api => {\n  /**\n   * @type {import('../types').DHTAPI[\"findPeer\"]}\n   */\n  async function * findPeer (peerId, options = {}) {\n    const res = await api.post('routing/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findPeer\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\nexport const createFindProvs = configure(api => {\n  /**\n   * @type {import('../types.js').DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('routing/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findProvs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('../types').DHTAPI[\"get\"]}\n   */\n  async function * get (key, options = {}) {\n    const res = await api.post('routing/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        // arg: base36.encode(key),\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\nexport const createProvide = configure(api => {\n  /**\n   * @type {import('../types').DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {import('../types').CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('routing/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return provide\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { mapEvent } from './map-event.js'\n\nexport const createPut = configure(api => {\n  /**\n   * @type {import('../types.js').DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('routing/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...(\n        await multipartRequest([value], controller, options.headers)\n      )\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return put\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\nexport const createQuery = configure(api => {\n  /**\n   * @type {import('../types.js').DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return query\n})\n","import { createFindPeer } from './find-peer.js'\nimport { createFindProvs } from './find-provs.js'\nimport { createGet } from './get.js'\nimport { createProvide } from './provide.js'\nimport { createPut } from './put.js'\nimport { createQuery } from './query.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDht (config) {\n  return {\n    findPeer: createFindPeer(config),\n    findProvs: createFindProvs(config),\n    get: createGet(config),\n    provide: createProvide(config),\n    put: createPut(config),\n    query: createQuery(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createCmds = configure(api => {\n  /**\n   * @type {import('../types').DiagAPI[\"cmds\"]}\n   */\n  async function cmds (options = {}) {\n    const res = await api.post('diag/cmds', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return cmds\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createNet = configure(api => {\n  /**\n   * @type {import('../types').DiagAPI[\"net\"]}\n   */\n  async function net (options = {}) {\n    const res = await api.post('diag/net', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    return res.json()\n  }\n  return net\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createSys = configure(api => {\n  /**\n   * @type {import('../types').DiagAPI[\"sys\"]}\n   */\n  async function sys (options = {}) {\n    const res = await api.post('diag/sys', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return sys\n})\n","import { createCmds } from './cmds.js'\nimport { createNet } from './net.js'\nimport { createSys } from './sys.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDiag (config) {\n  return {\n    cmds: createCmds(config),\n    net: createNet(config),\n    sys: createSys(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createCp = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('../types').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createFlush = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n","\n/**\n * Convert object properties to camel case.\n * NOT recursive!\n * e.g.\n * AgentVersion => agentVersion\n * ID => id\n *\n * @param {Record<string, any>} obj\n */\nexport function objectToCamel (obj) {\n  if (obj == null) {\n    return obj\n  }\n\n  const caps = /^[A-Z]+$/\n\n  /** @type {Record<string, any>} */\n  const output = {}\n\n  return Object.keys(obj).reduce((camelObj, k) => {\n    if (caps.test(k)) { // all caps\n      camelObj[k.toLowerCase()] = obj[k]\n    } else if (caps.test(k[0])) { // pascal\n      camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k]\n    } else {\n      camelObj[k] = obj[k]\n    }\n    return camelObj\n  }, output)\n}\n","import { objectToCamel } from './object-to-camel.js'\n\n/**\n * @param {Record<string, any>} entry\n */\nexport function objectToCamelWithMetadata (entry) {\n  const file = objectToCamel(entry)\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mode')) {\n    file.mode = parseInt(file.mode, 8)\n  }\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mtime')) {\n    file.mtime = {\n      secs: file.mtime,\n      nsecs: file.mtimeNsecs || 0\n    }\n\n    delete file.mtimeNsecs\n  }\n\n  return file\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLs = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createMkdir = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"mkdir\"]}\n   */\n  async function mkdir (path, options = {}) {\n    const res = await api.post('files/mkdir', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return mkdir\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createMv = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"mv\"]}\n   */\n  async function mv (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/mv', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    })\n    await res.text()\n  }\n\n  return mv\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n// @ts-expect-error no types\nimport toIterable from 'stream-to-it/source.js'\n\nexport const createRead = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"read\"]}\n   */\n  async function * read (path, options = {}) {\n    const res = await api.post('files/read', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        count: options.length,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * toIterable(res.body)\n  }\n  return read\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport HTTP from 'ipfs-utils/src/http.js'\n\nexport const createRm = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    const res = await api.post('files/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const body = await res.text()\n    // we don't expect text body to be ever present\n    // (if so, it means an error such as https://github.com/ipfs/go-ipfs/issues/8606)\n    if (body !== '') {\n      /** @type {Error} */\n      const error = new HTTP.HTTPError(res)\n      error.message = body\n      throw error\n    }\n  }\n  return rm\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(objectToCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n","import { modeToString } from '../lib/mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {import('../types').FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n","import { createCp } from './cp.js'\nimport { createFlush } from './flush.js'\nimport { createLs } from './ls.js'\nimport { createMkdir } from './mkdir.js'\nimport { createMv } from './mv.js'\nimport { createRead } from './read.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\nimport { createWrite } from './write.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createFiles (config) {\n  return {\n    cp: createCp(config),\n    flush: createFlush(config),\n    ls: createLs(config),\n    mkdir: createMkdir(config),\n    mv: createMv(config),\n    read: createRead(config),\n    rm: createRm(config),\n    stat: createStat(config),\n    write: createWrite(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\nexport const createExport = configure(api => {\n  /**\n   * @type {import('./types.js').KeyAPI['export']}\n   */\n  const exportKey = async (name, password, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return exportKey\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/** @type {import('./types.js').GenOptions} */\nconst defaultOptions = {\n  type: 'ed25519'\n}\n\nexport const createGen = configure(api => {\n  /**\n   * @type {import('./types.js').KeyAPI['gen']}\n   */\n  async function gen (name, options = defaultOptions) {\n    const res = await api.post('key/gen', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return gen\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createImport = configure(api => {\n  /**\n   * @type {import('./types.js').KeyAPI['import']}\n   */\n  async function importKey (name, pem, password, options = {}) {\n    const res = await api.post('key/import', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        pem,\n        password,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return importKey\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createList = configure(api => {\n  /**\n   * @type {import('../types.js').KeyAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('key/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Keys || []).map((/** @type {any} **/ k) => objectToCamel(k))\n  }\n  return list\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createRename = configure(api => {\n  /**\n   * @type {import('./types.js').KeyAPI['rename']}\n   */\n  async function rename (oldName, newName, options = {}) {\n    const res = await api.post('key/rename', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          oldName,\n          newName\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return rename\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createRm = configure(api => {\n  /**\n   * @type {import('../types').KeyAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    const res = await api.post('key/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data.Keys[0])\n  }\n  return rm\n})\n","import { createExport } from './export.js'\nimport { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types.js').Options} config\n * @returns {import('./types.js').KeyAPI}\n */\nexport function createKey (config) {\n  return {\n    export: createExport(config),\n    gen: createGen(config),\n    import: createImport(config),\n    list: createList(config),\n    rename: createRename(config),\n    rm: createRm(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLevel = configure(api => {\n  /**\n   * @type {import('../types').LogAPI[\"level\"]}\n   */\n  async function level (subsystem, level, options = {}) {\n    const res = await api.post('log/level', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          subsystem,\n          level\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return level\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLs = configure(api => {\n  /**\n   * @type {import('../types').LogAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const res = await api.post('log/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n    return data.Strings\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createTail = configure(api => {\n  /**\n   * @type {import('../types').LogAPI[\"tail\"]}\n   */\n  async function * tail (options = {}) {\n    const res = await api.post('log/tail', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return tail\n})\n","import { createLevel } from './level.js'\nimport { createLs } from './ls.js'\nimport { createTail } from './tail.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createLog (config) {\n  return {\n    level: createLevel(config),\n    ls: createLs(config),\n    tail: createTail(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @param {import('../types').Options} config\n * @returns {import('../types').IPFS<import('../types').HTTPClientExtraOptions>['publish']}\n */\nexport const createPublish = configure(api => {\n  /**\n   * @type {import('../types.js').NameAPI[\"publish\"]}\n   */\n  async function publish (path, options = {}) {\n    const res = await api.post('name/publish', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return publish\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {import('../types').NameAPI[\"resolve\"]}\n   */\n  async function * resolve (path, options = {}) {\n    const res = await api.post('name/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        stream: true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      yield result.Path\n    }\n  }\n  return resolve\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @param {import('../../types').Options} config\n * @returns {import('../../types').NamePubsubAPI[\"cancel\"]}\n */\nexport const createCancel = configure(api => {\n  /**\n   * @type {import('../../types').NamePubsubAPI[\"cancel\"]}\n   */\n  async function cancel (name, options = {}) {\n    const res = await api.post('name/pubsub/cancel', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return cancel\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createState = configure(api => {\n  /**\n   * @type {import('../../types').NamePubsubAPI[\"state\"]}\n   */\n  async function state (options = {}) {\n    const res = await api.post('name/pubsub/state', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return state\n})\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createSubs = configure(api => {\n  /**\n   * @type {import('../../types').NamePubsubAPI[\"subs\"]}\n   */\n  async function subs (options = {}) {\n    const res = await api.post('name/pubsub/subs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Strings || []\n  }\n  return subs\n})\n","import { createCancel } from './cancel.js'\nimport { createState } from './state.js'\nimport { createSubs } from './subs.js'\n\n/**\n * @param {import('../../types').Options} config\n * @returns {import('../../types').NamePubsubAPI}\n */\nexport function createPubsub (config) {\n  return {\n    cancel: createCancel(config),\n    state: createState(config),\n    subs: createSubs(config)\n  }\n}\n","import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { createPubsub } from './pubsub/index.js'\n\n/**\n * @param {import('../types').Options} config\n * @returns {import('../types').IPFS<import('../types').HTTPClientExtraOptions>['name']}\n */\nexport function createName (config) {\n  return {\n    publish: createPublish(config),\n    resolve: createResolve(config),\n    pubsub: createPubsub(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createData = configure(api => {\n  /**\n   * @type {import('../types').ObjectAPI[\"data\"]}\n   */\n  async function data (cid, options = {}) {\n    const res = await api.post('object/data', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.arrayBuffer()\n\n    return new Uint8Array(data, 0, data.byteLength)\n  }\n  return data\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('../types').ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLinks = configure(api => {\n  /**\n   * @type {import('../types').ObjectAPI[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const res = await api.post('object/links', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Links || []).map((/** @type {any} */ l) => ({\n      Name: l.Name,\n      Tsize: l.Size,\n      Hash: CID.parse(l.Hash)\n    }))\n  }\n  return links\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createNew = configure(api => {\n  /**\n   * @type {import('../types').ObjectAPI[\"new\"]}\n   */\n  async function newObject (options = {}) {\n    const res = await api.post('object/new', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.template,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return newObject\n})\n","import { configure } from '../lib/configure.js'\nimport { createPut as createDagPut } from '../dag/put.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    const dagPut = createDagPut(codecs, options)\n\n    /**\n     * @type {import('../types').ObjectAPI[\"put\"]}\n     */\n    async function put (obj, options = {}) {\n      return dagPut(obj, {\n        ...options,\n        storeCodec: 'dag-pb',\n        hashAlg: 'sha2-256',\n        version: 1\n      })\n    }\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types.js').ObjectAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('object/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const output = await res.json()\n\n    return {\n      ...output,\n      Hash: CID.parse(output.Hash)\n    }\n  }\n  return stat\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createAddLink = configure(api => {\n  /**\n   * @type {import('../../types').ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || '',\n          // @ts-expect-error loose types\n          (dLink.Hash || dLink.cid || '').toString() || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n\n  return addLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\nexport const createAppendData = configure(api => {\n  /**\n   * @type {import('../../types').ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/append-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return appendData\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\nexport const createRmLink = configure(api => {\n  /**\n   * @type {import('../../types').ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return rmLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\nexport const createSetData = configure(api => {\n  /**\n   * @type {import('../../types').ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n","import { createAddLink } from './add-link.js'\nimport { createAppendData } from './append-data.js'\nimport { createRmLink } from './rm-link.js'\nimport { createSetData } from './set-data.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPatch (config) {\n  return {\n    addLink: createAddLink(config),\n    appendData: createAppendData(config),\n    rmLink: createRmLink(config),\n    setData: createSetData(config)\n  }\n}\n","import { createData } from './data.js'\nimport { createGet } from './get.js'\nimport { createLinks } from './links.js'\nimport { createNew } from './new.js'\nimport { createPut } from './put.js'\nimport { createStat } from './stat.js'\nimport { createPatch } from './patch/index.js'\n\n/**\n * @param {import('../types').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createObject (codecs, config) {\n  return {\n    data: createData(config),\n    get: createGet(config),\n    links: createLinks(config),\n    new: createNew(config),\n    put: createPut(codecs, config),\n    stat: createStat(config),\n    patch: createPatch(config)\n  }\n}\n","import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * @param {any} thing\n * @returns {thing is IterableIterator<any> & Iterator<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterableIterator<any> & AsyncIterator<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is CID}\n */\nfunction isCID (thing) {\n  return CID.asCID(thing) != null\n}\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (isIterable(input)) {\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n\n    if (first.done) {\n      return iterator\n    }\n\n    // Iterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // Iterable<Pinnable>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (isAsyncIterable(input)) {\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for await (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {import('../types').PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          // eslint-disable-next-line no-continue\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createAdd (config) {\n  const all = createAddAll(config)\n\n  return configure(() => {\n    /**\n     * @type {import('../types').PinAPI[\"add\"]}\n     */\n    async function add (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return add\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('../types').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nexport const createLs = configure(api => {\n  /**\n   * @type {import('../types').PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {import('../types').PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          // eslint-disable-next-line no-continue\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n","import { createRmAll } from './rm-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport const createRm = (config) => {\n  const all = createRmAll(config)\n\n  return configure(() => {\n    /**\n     * @type {import('../types').PinAPI[\"rm\"]}\n     */\n    async function rm (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return rm\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {import('../../types.js').Status} json.Status\n * @returns {import('../../types.js').Pin}\n */\nexport const decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nexport const encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nexport const encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {import('../../types.js').Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nexport const encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {import('../../types.js').AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nexport const encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n","import { encodeAddParams, decodePin } from './utils.js'\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {import('../../types').RemotePiningAPI[\"add\"]}\n   */\n  async function add (cid, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...query })\n    })\n\n    return decodePin(await response.json())\n  }\n\n  return add\n}\n","import { encodeQuery, decodePin } from './utils.js'\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {import('../../types.js').RemotePiningAPI[\"ls\"]}\n   */\n  async function * ls ({ timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n\n    for await (const pin of response.ndjson()) {\n      yield decodePin(pin)\n    }\n  }\n\n  return ls\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {import('../../types').RemotePiningAPI[\"rm\"]}\n   */\n  async function rm ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: false\n      })\n    })\n  }\n\n  return rm\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRmAll (client) {\n  /**\n   * @type {import('../../types').RemotePiningAPI[\"rmAll\"]}\n   */\n  async function rmAll ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: true\n      })\n    })\n  }\n\n  return rmAll\n}\n","\n/**\n * @param {URL} url\n */\nexport function encodeEndpoint (url) {\n  const href = String(url)\n  if (href === 'undefined') {\n    throw Error('endpoint is required')\n  }\n  // Workaround trailing `/` issue in go-ipfs\n  // @see https://github.com/ipfs/go-ipfs/issues/7826\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href\n}\n\n/**\n * @param {any} json\n * @returns {import('../../../types').RemotePinServiceWithStat}\n */\nexport function decodeRemoteService (json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...(json.Stat && { stat: decodeStat(json.Stat) })\n  }\n}\n\n/**\n * @param {any} json\n * @returns {import('../../../types').Stat}\n */\nexport function decodeStat (json) {\n  switch (json.Status) {\n    case 'valid': {\n      const { Pinning, Pinned, Queued, Failed } = json.PinCount\n      return {\n        status: 'valid',\n        pinCount: {\n          queued: Queued,\n          pinning: Pinning,\n          pinned: Pinned,\n          failed: Failed\n        }\n      }\n    }\n    case 'invalid': {\n      return { status: 'invalid' }\n    }\n    default: {\n      return { status: json.Status }\n    }\n  }\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { encodeEndpoint } from './utils.js'\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {import('../../../types').RemotePiningServiceAPI[\"add\"]}\n   */\n  async function add (name, options) {\n    const { endpoint, key, headers, timeout, signal } = options\n\n    await client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, encodeEndpoint(endpoint), key]\n      }),\n      headers\n    })\n  }\n\n  return add\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { decodeRemoteService } from './utils.js'\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {import('../../../types').RemotePiningServiceAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    // @ts-expect-error cannot derive option type from typedef\n    const { stat, headers, timeout, signal } = options\n\n    const response = await client.post('pin/remote/service/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined\n    })\n\n    /** @type {{RemoteServices: object[]}} */\n    const { RemoteServices } = await response.json()\n\n    return RemoteServices.map(decodeRemoteService)\n  }\n\n  return ls\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {import('../../../types').RemotePiningServiceAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    await client.post('pin/remote/service/rm', {\n      signal: options.signal,\n      headers: options.headers,\n      searchParams: toUrlSearchParams({\n        arg: name\n      })\n    })\n  }\n\n  return rm\n}\n","import { Client } from '../../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../../../types').Options} config\n */\nexport function createService (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client)\n  }\n}\n","import { Client } from '../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\nimport { createService } from './service/index.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createRemote (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client),\n    rmAll: createRmAll(client),\n    service: createService(config)\n  }\n}\n","import { createAddAll } from './add-all.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRmAll } from './rm-all.js'\nimport { createRm } from './rm.js'\nimport { createRemote } from './remote/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPin (config) {\n  return {\n    addAll: createAddAll(config),\n    add: createAdd(config),\n    ls: createLs(config),\n    rmAll: createRmAll(config),\n    rm: createRm(config),\n    remote: createRemote(config)\n  }\n}\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { base64url } from 'multiformats/bases/base64'\n\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\n\n/**\n * @param {Array<string>} strings\n * @returns {Array<string>} strings\n */\nconst rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText)\n  }\n  return strings\n}\n\n/**\n * @param {string} mb\n * @returns {string}\n */\nconst rpcToText = mb => uint8ArrayToString(rpcToBytes(mb))\n\n/**\n * @param {string} mb\n * @returns {Uint8Array}\n */\nconst rpcToBytes = mb => base64url.decode(mb)\n\n/**\n * @param {string} mb\n * @returns {bigint}\n */\nconst rpcToBigInt = mb => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`)\n\n/**\n * @param {string} text\n * @returns {string}\n */\nconst textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text))\n\nexport { rpcArrayToTextArray, rpcToText, rpcToBytes, rpcToBigInt, textToUrlSafeRpc }\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { rpcArrayToTextArray } from '../lib/http-rpc-wire-format.js'\n\nexport const createLs = configure(api => {\n  /**\n   * @type {import('../types').PubsubAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { Strings } = await (await api.post('pubsub/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return rpcArrayToTextArray(Strings) || []\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {import('../types').PubsubAPI[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const res = await api.post('pubsub/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: textToUrlSafeRpc(topic),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return peers\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {import('../types').PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: textToUrlSafeRpc(topic),\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n","import { logger } from '@libp2p/logger'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\nconst log = logger('js-kubo-rpc-client:pubsub:subscribe')\n\n/**\n * @param {import('../types').Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createSubscribe = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {import('../types').PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: (message) => {\n              if (!handler) {\n                return\n              }\n\n              if (typeof handler === 'function') {\n                handler(message)\n                return\n              }\n\n              if (typeof handler.handleEvent === 'function') {\n                handler.handleEvent(message)\n              }\n            },\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('../types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: import('../types').Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {import('../types').PubsubApiErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          // eslint-disable-next-line no-continue\n          continue\n        }\n\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          })\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          })\n        }\n      } catch (/** @type {any} */ err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (/** @type {any} */ err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n","\n/**\n * @param {import('..').Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createUnsubscribe = (options, subsTracker) => {\n  /**\n   * @type {import('../types').PubsubAPI[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler) {\n    subsTracker.unsubscribe(topic, handler)\n  }\n  return unsubscribe\n}\n","\n/**\n *\n * @property {import('../types').MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nexport class SubscriptionTracker {\n  constructor () {\n    /** @type {Map<string, import('../types').PubsubSubscription[]>} */\n    this._subs = new Map()\n  }\n\n  /**\n   * @param {string} topic\n   * @param {import('../types').MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   * @returns {AbortSignal}\n   */\n  subscribe (topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || []\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`)\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController()\n\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\n    }\n\n    return controller.signal\n  }\n\n  /**\n   * @param {string} topic\n   * @param {import('../types').MessageHandlerFn} [handler]\n   */\n  unsubscribe (topic, handler) {\n    const subs = this._subs.get(topic) || []\n    let unsubs\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\n      unsubs = subs.filter(s => s.handler === handler)\n    } else {\n      this._subs.set(topic, [])\n      unsubs = subs\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic)\n    }\n\n    unsubs.forEach(s => s.controller.abort())\n  }\n}\n","import { createLs } from './ls.js'\nimport { createPeers } from './peers.js'\nimport { createPublish } from './publish.js'\nimport { createSubscribe } from './subscribe.js'\nimport { createUnsubscribe } from './unsubscribe.js'\nimport { SubscriptionTracker } from './subscription-tracker.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPubsub (config) {\n  const subscriptionTracker = new SubscriptionTracker()\n\n  return {\n    ls: createLs(config),\n    peers: createPeers(config),\n    publish: createPublish(config),\n    subscribe: createSubscribe(config, subscriptionTracker),\n    unsubscribe: createUnsubscribe(config, subscriptionTracker)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLocal = configure(api => {\n  /**\n   * @type {import('../types').RefsAPI[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: objectToCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return refsLocal\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { createLocal } from './local.js'\n\nexport const createRefs = configure((api, opts) => {\n  /**\n   * @type {import('../types').RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('../types').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  })\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createGc = configure(api => {\n  /**\n   * @type {import('../types').RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createStat = configure(api => {\n  /**\n   * @type {import('../types').RepoAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('repo/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      numObjects: BigInt(data.NumObjects),\n      repoSize: BigInt(data.RepoSize),\n      repoPath: data.RepoPath,\n      version: data.Version,\n      storageMax: BigInt(data.StorageMax)\n    }\n  }\n  return stat\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {import('../types').RepoAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await (await api.post('repo/version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return res.Version\n  }\n  return version\n})\n","import { createGc } from './gc.js'\nimport { createStat } from './stat.js'\nimport { createVersion } from './version.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createRepo (config) {\n  return {\n    gc: createGc(config),\n    stat: createStat(config),\n    version: createVersion(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createBw = configure(api => {\n  /**\n   * @type {import('../types').StatsAPI[\"bw\"]}\n   */\n  async function * bw (options = {}) {\n    const res = await api.post('stats/bw', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (stats) => ({\n        totalIn: BigInt(stats.TotalIn),\n        totalOut: BigInt(stats.TotalOut),\n        rateIn: parseFloat(stats.RateIn),\n        rateOut: parseFloat(stats.RateOut)\n      })\n    })\n\n    yield * res.ndjson()\n  }\n  return bw\n})\n","import { createStat as createBitswap } from '../bitswap/stat.js'\nimport { createStat as createRepo } from '../repo/stat.js'\nimport { createBw } from './bw.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createStats (config) {\n  return {\n    bitswap: createBitswap(config),\n    repo: createRepo(config),\n    bw: createBw(config)\n  }\n}\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nexport const createAddrs = configure(api => {\n  /**\n   * @type {import('../types.js').SwarmAPI[\"addrs\"]}\n   */\n  async function addrs (options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Addrs: Record<string, string[]> }} */\n    const { Addrs } = await res.json()\n\n    return Object.keys(Addrs).map(id => ({\n      id: peerIdFromString(id),\n      addrs: (Addrs[id] || []).map(a => multiaddr(a))\n    }))\n  }\n  return addrs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createConnect = configure(api => {\n  /**\n   * @type {import('../types').SwarmAPI[\"connect\"]}\n   */\n  async function connect (addr, options = {}) {\n    const res = await api.post('swarm/connect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return connect\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createDisconnect = configure(api => {\n  /**\n   * @type {import('../types').SwarmAPI[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const res = await api.post('swarm/disconnect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return disconnect\n})\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\nexport const createLocalAddrs = configure(api => {\n  /**\n   * @type {import('../types.js').SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => multiaddr(a))\n  }\n  return localAddrs\n})\n","import { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {import('../types').SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: multiaddr(peer.Addr),\n        peer: peerIdFromString(peer.Peer),\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        // eslint-disable-next-line no-nested-ternary\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n","import { createAddrs } from './addrs.js'\nimport { createConnect } from './connect.js'\nimport { createDisconnect } from './disconnect.js'\nimport { createLocalAddrs } from './local-addrs.js'\nimport { createPeers } from './peers.js'\n\n/**\n * @param {import('../types').Options} config\n * @returns {import('../types').IPFS<import('../types').HTTPClientExtraOptions>['swarm']}\n */\nexport function createSwarm (config) {\n  return {\n    addrs: createAddrs(config),\n    connect: createConnect(config),\n    disconnect: createDisconnect(config),\n    localAddrs: createLocalAddrs(config),\n    peers: createPeers(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { abortSignal } from './lib/abort-signal.js'\n\nexport const createAddAll = configure((api) => {\n  /**\n   * @type {import('./types.js').RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {import('./types.js').IPFSCoreAddProgressFn} progress\n * @returns {[import('./types.js').IPFSCoreAddProgressFn|undefined, import('./types.js').IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {import('./types.js').IPFSCoreAddProgressFn} progress\n * @returns {import('./types.js').IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {import('./types.js').AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n","/**\n * @packageDocumentation\n *\n * Allows treating a browser readable stream as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'browser-readablestream-to-it'\n * import all from 'it-all'\n *\n * const content = [0, 1, 2, 3, 4]\n *\n * const stream = new ReadableStream({\n *   start(controller) {\n *     for (let i = 0; i < content.length; i++) {\n *       controller.enqueue(content[i])\n *     }\n *\n *     controller.close()\n *   }\n * })\n *\n * const arr = await all(toIt(stream))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * ## preventCancel\n *\n * By default a readable stream will have [.cancel](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel) called on it once it has ended or\n * reading has stopped prematurely.\n *\n * To prevent this behaviour, pass `preventCancel: true` as an option:\n *\n * ```javascript\n * const arr = await all(toIt(stream, { preventCancel: true }))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n\nexport interface BrowserReadableStreamToItOptions {\n  preventCancel?: boolean\n}\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function * browserReadableStreamToIt <T> (stream: ReadableStream<T>, options: BrowserReadableStreamToItOptions = {}): AsyncGenerator<T, void, undefined> {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n","import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport blobToIt from 'blob-to-it'\nimport itPeekable from 'it-peekable'\nimport all from 'it-all'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js'\n\n/**\n * @template T\n * @param {T} thing\n */\nasync function * toAsyncIterable (thing) {\n  yield thing\n}\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input))\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()))\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    return blobToIt(input)\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value */\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0))\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)))\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes (chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk)\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk)\n  }\n\n  return uint8ArrayFromString(chunk.toString())\n}\n","/**\n * @packageDocumentation\n *\n * Allows reading Blob contents as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'blob-to-it'\n * import all from 'it-all'\n *\n * const content = [ Uint8Array.from([0, 1, 2, 3, 4]) ]\n * const blob = new Blob(content)\n * const arr = await all(toIt(blob))\n *\n * console.info(arr) // [ [ 0, 1, 2, 3, 4 ] ]\n * ```\n */\n\nimport browserReadableStreamToIt from 'browser-readablestream-to-it'\n\nexport default function blobToIt (blob: Blob): AsyncIterable<Uint8Array> {\n  if (typeof blob.stream === 'function') {\n    return browserReadableStreamToIt(blob.stream())\n  }\n\n  // firefox < 69 does not support blob.stream()\n  // @ts-expect-error - response.body is optional, but in practice it's a stream.\n  return browserReadableStreamToIt(new Response(blob).body)\n}\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateSingle (input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield { content: [] }\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.js'\nimport { normaliseCandidateSingle } from './normalise-candidate-single.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.add` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: AsyncIterable<Uint8Array> }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidate} input\n */\nexport function normaliseInput (input) {\n  return normaliseCandidateSingle(input, normaliseContent)\n}\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from './lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @param {import('./types').Options} options\n */\nexport function createAdd (options) {\n  const all = createAddAll(options)\n  return configure(() => {\n    /**\n     * @type {import('./types').RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      const source = normaliseInput(input)\n      // @ts-expect-error - all may return undefined if source is empty\n      const addAllPromise = all(source, options)\n      // @ts-expect-error - last may return undefined if source is empty\n      return await last(addAllPromise)\n    }\n    return add\n  })(options)\n}\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createCat = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"cat\"]}\n   */\n  async function * cat (path, options = {}) {\n    const res = await api.post('cat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return cat\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createCommands = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"commands\"]}\n   */\n  const commands = async (options = {}) => {\n    const res = await api.post('commands', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return commands\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createDns = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"dns\"]}\n   */\n  const dns = async (domain, options = {}) => {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: domain,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Path\n  }\n\n  return dns\n})\n","import { configure } from './lib/configure.js'\n\nexport const createGetEndpointConfig = configure(api => {\n  return () => {\n    const url = new URL(api.opts.base || '')\n    return {\n      host: url.hostname,\n      port: url.port,\n      protocol: url.protocol,\n      pathname: url.pathname,\n      'api-path': url.pathname\n    }\n  }\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createGet = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\nexport const createId = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n","import { createId } from './id.js'\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options)\n\n  /**\n   * @type {import('./types').RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { createStat } from './files/stat.js'\n\nexport const createLs = configure((api, opts) => {\n  /**\n   * @type {import('./types').RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await createStat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('./types').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createMount = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"mount\"]}\n   */\n  async function mount (options = {}) {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return mount\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createPing = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const res = await api.post('ping', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n  return ping\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"resolve\"]}\n   */\n  async function resolve (path, options = {}) {\n    const res = await api.post('resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Path } = await res.json()\n    return Path\n  }\n  return resolve\n})\n","import { configure } from './lib/configure.js'\nimport errCode from 'err-code'\n\nexport const createStart = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"start\"]}\n   */\n  const start = async (options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return start\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createStop = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"stop\"]}\n   */\n  async function stop (options = {}) {\n    const res = await api.post('shutdown', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return stop\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {import('./types').RootAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return {\n      ...objectToCamel(await res.json()),\n      'ipfs-http-client': '1.0.0'\n    }\n  }\n\n  return version\n})\n","/* eslint-env browser */\n\nimport { Multibases } from 'ipfs-core-utils/multibases'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { createBitswap } from './bitswap/index.js'\nimport { createBlock } from './block/index.js'\nimport { createBootstrap } from './bootstrap/index.js'\nimport { createConfig } from './config/index.js'\nimport { createDag } from './dag/index.js'\nimport { createDht } from './dht/index.js'\nimport { createDiag } from './diag/index.js'\nimport { createFiles } from './files/index.js'\nimport { createKey } from './key/index.js'\nimport { createLog } from './log/index.js'\nimport { createName } from './name/index.js'\nimport { createObject } from './object/index.js'\nimport { createPin } from './pin/index.js'\nimport { createPubsub } from './pubsub/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createRepo } from './repo/index.js'\nimport { createStats } from './stats/index.js'\nimport { createSwarm } from './swarm/index.js'\nimport { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createCat } from './cat.js'\nimport { createCommands } from './commands.js'\nimport { createDns } from './dns.js'\nimport { createGetEndpointConfig } from './get-endpoint-config.js'\nimport { createGet } from './get.js'\nimport { createId } from './id.js'\nimport { createIsOnline } from './is-online.js'\nimport { createLs } from './ls.js'\nimport { createMount } from './mount.js'\nimport { createPing } from './ping.js'\nimport { createResolve } from './resolve.js'\nimport { createStart } from './start.js'\nimport { createStop } from './stop.js'\nimport { createVersion } from './version.js'\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js'\n\n/**\n *\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport function create (options = {}) {\n  /**\n   * @type {import('./types').BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {import('./types').MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n\n  /** @type {import('./types').BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  /** @type {import('./types').MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['key']} */(createKey(options)),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['name']} */(createName(options)),\n    object: createObject(multicodecs, options),\n    pin: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['pin']} */(createPin(options)),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['swarm']} */(createSwarm(options)),\n    version: /** @type {import('./types').IPFS<HTTPClientExtraOptions>['version']} */(createVersion(options)),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  }\n\n  return client\n}\n\nexport { CID } from 'multiformats/cid'\nexport { multiaddr } from '@multiformats/multiaddr'\nexport { default as urlSource } from 'ipfs-utils/src/files/url-source.js'\nexport const globSource = globSourceImport\n","import { createWantlist } from './wantlist.js'\nimport { createWantlistForPeer } from './wantlist-for-peer.js'\nimport { createStat } from './stat.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBitswap (config) {\n  return {\n    /**\n     * TODO: https://github.com/ipfs/js-kubo-rpc-client/issues/99\n     */\n    wantlist: createWantlist(config),\n    wantlistForPeer: createWantlistForPeer(config),\n    stat: createStat(config)\n  }\n}\n","'use strict'\n\nif (globalThis.fetch && globalThis.Headers && globalThis.Request && globalThis.Response) {\n  module.exports = {\n    default: globalThis.fetch,\n    Headers: globalThis.Headers,\n    Request: globalThis.Request,\n    Response: globalThis.Response\n  }\n} else {\n  module.exports = {\n    default: require('node-fetch').default,\n    Headers: require('node-fetch').Headers,\n    Request: require('node-fetch').Request,\n    Response: require('node-fetch').Response\n  }\n}\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n"],"names":["module","exports","stream","options","arguments","length","undefined","reader","getReader","result","read","done","value","preventCancel","cancel","releaseLock","e","Promise","reject","anySignal","signals","controller","globalThis","AbortController","onAbort","abort","signal","removeEventListener","addEventListener","aborted","isElectron","require","IS_ENV_WITH_DOM","window","document","nodeType","IS_ELECTRON","IS_BROWSER","IS_ELECTRON_MAIN","IS_ELECTRON_RENDERER","IS_NODE","process","release","name","IS_WEBWORKER","importScripts","self","WorkerGlobalScope","IS_TEST","IS_REACT_NATIVE","navigator","product","isTest","isElectronMain","isElectronRenderer","isNode","isBrowser","isWebWorker","isEnvWithDom","isReactNative","HTTP","async","readURLContent","url","http","response","get","iterator","urlSource","path","decodeURIComponent","URL","pathname","split","pop","content","fetch","Request","Headers","TimeoutError","HTTPError","merge","ignoreUndefined","URLSearchParams","browserReableStreamToIt","all","defaults","throwHttpErrors","credentials","constructor","this","opts","resource","headers","TypeError","toString","base","searchParams","transformSearchParams","json","search","body","JSON","stringify","set","abortController","ReadableStream","Blob","timeout","promise","ms","start","Date","now","timedOut","resolve","timeoutID","setTimeout","after","next","res","clearTimeout","then","duplex","ok","handleError","fromStream","ndjson","chunk","transform","post","method","put","delete","source","decoder","TextDecoder","buf","decode","lines","i","l","trim","parse","isAsyncIterable","isNodeReadableStream","iter","Symbol","asyncIterator","bind","return","destroy","isWebReadableStream","Object","prototype","hasOwnProperty","call","streamToAsyncIterator","Error","super","AbortError","statusText","Response","default","fetchWithStreaming","parseHeaders","input","line","index","indexOf","slice","ResponseWithURL","defineProperty","onUploadProgress","request","XMLHttpRequest","open","Infinity","overrideMimeType","setRequestHeader","onabort","upload","onprogress","responseType","handleEvent","event","type","error","responseURL","status","getAllResponseHeaders","onerror","onload","ontimeout","send","fetchWithProgress","protobuf","configure","util","_configure","Writer","BufferWriter","Reader","BufferReader","build","rpc","roots","LongBits","utf8","indexOutOfRange","writeLength","RangeError","pos","len","buffer","create_array","Uint8Array","Array","isArray","create","Buffer","isBuffer","readLongVarint","bits","lo","hi","readFixed32_end","end","readFixed64","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","readFloatLE","double","readDoubleLE","bytes","nativeBuffer","alloc","string","skip","skipType","wireType","BufferReader_","fn","Long","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Math","min","Service","rpcImpl","requestDelimited","responseDelimited","EventEmitter","Boolean","rpcCall","requestCtor","responseCtor","callback","asPromise","finish","err","emit","endedByRPC","off","zero","toNumber","zzEncode","zeroHash","fromNumber","sign","from","isString","parseInt","fromString","low","high","unsigned","toLong","charCodeAt","String","fromHash","hash","toHash","fromCharCode","mask","part0","part1","part2","dst","src","ifNotSet","keys","newError","CustomError","message","properties","captureStackTrace","stack","writable","enumerable","configurable","base64","inquire","pool","global","versions","node","emptyArray","freeze","emptyObject","isInteger","Number","isFinite","floor","isObject","isset","isSet","obj","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","lcFirst","str","charAt","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","encoding","allocUnsafe","size","Op","val","noop","State","writer","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeFloatLE","writeDoubleLE","writeBytes","write","fork","reset","ldelim","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","LOAD_BASE","concat","Multibases","_basesByName","_basesByPrefix","_loadBase","loadBase","bases","addBase","prefix","removeBase","getBase","nameOrPrefix","listBases","values","LOAD_CODEC","codeOrName","Multicodecs","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codec","codecs","addCodec","code","removeCodec","getCodec","table","listCodecs","LOAD_HASHER","Multihashes","_hashersByName","_hashersByCode","_loadHasher","loadHasher","hasher","hashers","addHasher","removeHasher","getHasher","listHashers","coerce","o","ArrayBuffer","isView","byteOffset","encode_1","encode","num","out","offset","oldOffset","INT","MSB","MSBALL","pow","b","shift","counter","REST$1","MSB$1","N1","N2","N3","N4","N5","N6","N7","N8","N9","encodingLength","data","varint","encodeTo","int","target","digest","sizeOffset","digestOffset","Digest","multihash","identity","ALPHABET","BASE_MAP","j","x","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","pbegin","pend","b58","it1","it2","repeat","Encoder","baseEncode","Decoder","baseDecode","codePointAt","prefixCodePoint","text","or","ComposedDecoder","decoders","left","right","Codec","encoder","_ref","baseX","_ref2","alphabet","basex","rfc4648","_ref3","bitsPerChar","pad","codes","written","SyntaxError","TextEncoder","base2","base8","base10","base16","base16upper","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base36","base36upper","base58btc","base58flickr","base64pad","base64url","base64urlpad","alphabetBytesToChars","reduce","p","c","alphabetCharsToBytes","base256emoji","byts","char","byt","push","Hasher","sha","crypto","subtle","sha256","sha512","textEncoder","textDecoder","format","link","version","toStringV0","baseCache","toStringV1","cache","WeakMap","cid","Map","CID","asCID","toV0","DAG_PB_CODE","SHA_256_CODE","createV0","toV1","createV1","equals","other","unknown","a","aa","bb","ii","equalBytes","toJSON","toStringTag","for","encodeCID","cidSymbol","remainder","decodeFirst","specs","inspectBytes","prefixSize","multihashSize","multihashBytes","digestBytes","digestSize","multihashCode","initialBytes","parseCIDtoBytes","codeOffset","hashOffset","identityBase","base58","hashes","sha2","raw","durationRE","replace","isNegative","_","n","units","unitRatio","abs","parseFloat","nanosecond","ns","us","microsecond","millisecond","second","sec","s","minute","m","hour","hr","h","day","d","week","wk","w","month","year","yr","y","logger","trace","namespace","enabled","color","diff","extend","createDisabledLogger","debug","map","r","find","includes","assign","v","t","k","isV4","isV6","toBytes","ip","forEach","byte","sections","v4Buffer","splice","unshift","argv","apply","word","view","DataView","join","getUint16","V","names","getProtocol","proto","row","resolvable","createProtocol","convertToString","ipBuff","ipString","bytes2ip","bytes2str","bytes2port","address","bytes2mh","bytes2onion","bytes2mb","convertToBytes","ip2bytes","str2bytes","port2bytes","mh","mh2bytes","addr","port","portBuf","onion2bytes","onion32bytes","mbstr","mb","anybaseDecoder","mb2bytes","acc","setUint16","addrBytes","portBytes","tuplesToStringTuples","tuples","tup","protoFromTuple","tuplesToBytes","fromBytes","sizeForAddr","bytesToTuples","ParseError","bytesToString","parts","cleanPath","stringTuplesToString","stringToBytes","part","stringToStringTuples","validateBytes","filter","inspect","DNS_CODES","resolvers","symbol","isMultiaddr","DefaultMultiaddr","toOptions","family","transport","host","zone","tcp","udp","ip4","ip6","dns6","ip6zone","stringTuples","protos","protoCodes","protoNames","encapsulate","decapsulate","addrString","lastIndexOf","decapsulateCode","getPeerId","tuple","ipfs","peerIdStr","getPath","resolvableProto","resolver","nodeAddress","isThinWaistAddress","toUrlString","multiaddrToUri","mergeOpts","DEFAULT_PROTOCOL","location","protocol","DEFAULT_HOST","hostname","DEFAULT_PORT","errorHandler","msg","startsWith","Message","KEBAB_REGEX","kebabCase","match","Client","_this","agent","apiPath","Agent","getAgent","keepAlive","maxSockets","normalizeOptions","parseDuration","key","append","isNaN","modeToString","mode","padStart","parseMtime","mtime","secs","nsecs","Seconds","FractionalNanoseconds","getTime","errCode","toUrlSearchParams","arg","hashAlg","mtimeNsecs","urlSearchParams","createWantlist","api","Keys","createWantlistForPeer","peerId","peer","_defineProperty","baseDecoder","curr","LIBP2P_KEY_CODE","MARSHALLED_ED225519_PUBLIC_KEY_LENGTH","MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH","PeerIdImpl","init","privateKey","toCID","id","_id$multihash","uint8ArrayEquals","peerIdFromString","RSAPeerIdImpl","publicKey","Ed25519PeerIdImpl","Secp256k1PeerIdImpl","_decoder","peerIdFromCID","peerIdFromBytes","createStat","provideBufLen","ProvideBufLen","wantlist","Wantlist","peers","Peers","blocksReceived","BigInt","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived","toCoreInterface","createGet","arrayBuffer","peekableIterator","iterable","queue","peek","browserReadableStreamToIt","arr","entry","isBytes","isBlob","isFileObject","isReadableStream","normaliseContent","browserStreamToIt","peekable","itPeekable","itToBlob","func","$Reader","$protobuf","$Writer","$util","$root","Data","blocksizes","ks","Type","filesize","hashType","fanout","UnixTime","c2","instance","fromObject","fromValue","toObject","arrays","DataType","valuesById","Metadata","MimeType","parseMode","errcode","toFileObject","file","normaliseInput","_readableState","normaliseCandidateMultiple","multipartRequest","formData","FormData","total","fileSuffix","fieldName","qs","encodeURIComponent","File","abortSignal","_len","_key","createPut","configOptions","Key","createRm","removed","Hash","Size","createBlock","config","rm","stat","createAdd","ma","multiaddr","createList","createBootstrap","add","list","createApply","profile","original","OldCfg","updated","NewCfg","createProfiles","Value","createGetAll","createReplace","uint8ArrayFromString","createSet","params","encodeParam","createConfig","getAll","profiles","createExport","root","getBlock","load","block","lastCid","remainderPath","last","createBlockGet","localResolve","first","createImport","pinRoots","Root","Cid","PinErrorMsg","pinErrorMsg","dagNode","settings","storeCodec","serialized","inputCodec","createResolve","ipfsPath","RemPath","createDag","export","import","mapEvent","ID","messageType","messageName","closer","Responses","Addrs","multiaddrs","protocols","providers","_event$ID","Extra","_ref4","createFindPeer","createFindProvs","uint8ArrayToString","createProvide","cids","recursive","cidArr","createQuery","createDht","findPeer","findProvs","provide","query","createCmds","createNet","createSys","createDiag","cmds","net","sys","createCp","sources","destination","sourceArr","createFlush","objectToCamel","caps","camelObj","test","objectToCamelWithMetadata","createLs","long","Entries","createMkdir","createMv","createRead","count","toIterable","WithLocality","createWrite","streamChannels","createFiles","cp","flush","ls","mkdir","mv","password","defaultOptions","createGen","pem","createRename","oldName","newName","createKey","gen","rename","createLevel","subsystem","level","Strings","createTail","createLog","createPublish","Path","createCancel","createState","createSubs","createPubsub","state","subs","createName","publish","pubsub","createData","dataEncoding","Links","Name","Tsize","createLinks","createNew","template","dagPut","createDagPut","output","createAddLink","dLink","createAppendData","createRmLink","createSetData","createPatch","addLink","appendData","rmLink","setData","createObject","links","new","patch","isCID","thing","toPin","pin","metadata","createAddAll","Pins","paths","createRmAll","decodePin","Status","encodeService","service","encodeQuery","force","encodeAddParams","background","origins","origin","client","encodeEndpoint","href","decodeRemoteService","endpoint","ApiEndpoint","Stat","decodeStat","Pinning","Pinned","Queued","Failed","PinCount","pinCount","queued","pinning","pinned","failed","RemoteServices","createService","createRemote","rmAll","createPin","addAll","remote","rpcToText","rpcToBytes","rpcToBigInt","textToUrlSafeRpc","strings","createPeers","topic","createSubscribe","subsTracker","handler","fail","subscribe","ffWorkaround","catch","unsubscribe","onMessage","onEnd","onError","_msg$key","_msg$signature","seqno","sequenceNumber","topicIDs","signature","isAbortError","readMessages","createUnsubscribe","SubscriptionTracker","_subs","topicSubs","unsubs","subscriptionTracker","createLocal","createRefs","args","argsArr","local","createGc","numObjects","NumObjects","repoSize","RepoSize","repoPath","RepoPath","Version","storageMax","StorageMax","createVersion","createRepo","gc","createBw","stats","totalIn","TotalIn","totalOut","TotalOut","rateIn","RateIn","rateOut","RateOut","createStats","bitswap","createBitswap","repo","bw","createAddrs","addrs","createConnect","createDisconnect","createLocalAddrs","Addr","Peer","muxer","Muxer","latency","Latency","streams","Streams","direction","Direction","createSwarm","connect","disconnect","localAddrs","progressFn","progress","createProgressHandler","createOnUploadProgress","loaded","position","toAsyncIterable","blob","normaliseCandidateSingle","addAllPromise","createCat","createCommands","createDns","domain","createGetEndpointConfig","compressionLevel","createId","addresses","createIsOnline","pathStr","mapLink","typeOf","Mode","Mtime","MtimeNsecs","Objects","createMount","createPing","createStart","createStop","multibaseCodecs","ipld","multibases","blockCodecs","dagPB","dagCBOR","dagJSON","dagJOSE","multicodecs","multihashHashers","multihashes","wantlistForPeer","bootstrap","cat","commands","dag","dht","diag","dns","files","getEndpointConfig","isOnline","mount","object","ping","refs","stop","swarm","globalObject","getGlobal"],"sourceRoot":""}